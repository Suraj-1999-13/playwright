{
  "nodes": [
    {
      "id": "Sinatra",
      "label": "Sinatra",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request",
      "label": "Request",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::accept",
      "label": "Request::accept",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::accept?",
      "label": "Request::accept?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::preferred_type",
      "label": "Request::preferred_type",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::forwarded?",
      "label": "Request::forwarded?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::safe?",
      "label": "Request::safe?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::idempotent?",
      "label": "Request::idempotent?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::link?",
      "label": "Request::link?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::unlink?",
      "label": "Request::unlink?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::params",
      "label": "Request::params",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "AcceptEntry",
      "label": "AcceptEntry",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "AcceptEntry::initialize",
      "label": "AcceptEntry::initialize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "AcceptEntry::<=>",
      "label": "AcceptEntry::<=>",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "AcceptEntry::priority",
      "label": "AcceptEntry::priority",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "AcceptEntry::to_str",
      "label": "AcceptEntry::to_str",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "AcceptEntry::to_s",
      "label": "AcceptEntry::to_s",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "AcceptEntry::respond_to?",
      "label": "AcceptEntry::respond_to?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "AcceptEntry::method_missing",
      "label": "AcceptEntry::method_missing",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::initialize",
      "label": "Request::initialize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::<=>",
      "label": "Request::<=>",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::priority",
      "label": "Request::priority",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::to_str",
      "label": "Request::to_str",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::to_s",
      "label": "Request::to_s",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::respond_to?",
      "label": "Request::respond_to?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::method_missing",
      "label": "Request::method_missing",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "MimeTypeEntry",
      "label": "MimeTypeEntry",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "MimeTypeEntry::initialize",
      "label": "MimeTypeEntry::initialize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "MimeTypeEntry::accepts?",
      "label": "MimeTypeEntry::accepts?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "MimeTypeEntry::to_str",
      "label": "MimeTypeEntry::to_str",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "MimeTypeEntry::matches_params?",
      "label": "MimeTypeEntry::matches_params?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::accepts?",
      "label": "Request::accepts?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Request::matches_params?",
      "label": "Request::matches_params?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "accept",
      "label": "accept",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "accept?",
      "label": "accept?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "preferred_type",
      "label": "preferred_type",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "forwarded?",
      "label": "forwarded?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "safe?",
      "label": "safe?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "idempotent?",
      "label": "idempotent?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "link?",
      "label": "link?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "unlink?",
      "label": "unlink?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "params",
      "label": "params",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "initialize",
      "label": "initialize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "<=>",
      "label": "<=>",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "priority",
      "label": "priority",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "to_str",
      "label": "to_str",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "to_s",
      "label": "to_s",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "respond_to?",
      "label": "respond_to?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "method_missing",
      "label": "method_missing",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "accepts?",
      "label": "accepts?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "matches_params?",
      "label": "matches_params?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Response",
      "label": "Response",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Response::body=",
      "label": "Response::body=",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Response::each",
      "label": "Response::each",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Response::finish",
      "label": "Response::finish",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Response::calculate_content_length?",
      "label": "Response::calculate_content_length?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Response::drop_content_info?",
      "label": "Response::drop_content_info?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Response::drop_body?",
      "label": "Response::drop_body?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "body=",
      "label": "body=",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "each",
      "label": "each",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "finish",
      "label": "finish",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "calculate_content_length?",
      "label": "calculate_content_length?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "drop_content_info?",
      "label": "drop_content_info?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "drop_body?",
      "label": "drop_body?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "ExtendedRack",
      "label": "ExtendedRack",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "ExtendedRack::call",
      "label": "ExtendedRack::call",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "ExtendedRack::setup_close",
      "label": "ExtendedRack::setup_close",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "ExtendedRack::after_response",
      "label": "ExtendedRack::after_response",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "ExtendedRack::async?",
      "label": "ExtendedRack::async?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "call",
      "label": "call",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_close",
      "label": "setup_close",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "after_response",
      "label": "after_response",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "async?",
      "label": "async?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "CommonLogger",
      "label": "CommonLogger",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "CommonLogger::call",
      "label": "CommonLogger::call",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Error",
      "label": "Error",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "BadRequest",
      "label": "BadRequest",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "BadRequest::http_status",
      "label": "BadRequest::http_status",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "http_status",
      "label": "http_status",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "NotFound",
      "label": "NotFound",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "NotFound::http_status",
      "label": "NotFound::http_status",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Helpers",
      "label": "Helpers",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "status",
      "label": "status",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "body",
      "label": "body",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "redirect",
      "label": "redirect",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "uri",
      "label": "uri",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "error",
      "label": "error",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "not_found",
      "label": "not_found",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "headers",
      "label": "headers",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "session",
      "label": "session",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "logger",
      "label": "logger",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "mime_type",
      "label": "mime_type",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "content_type",
      "label": "content_type",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "attachment",
      "label": "attachment",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "send_file",
      "label": "send_file",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Stream",
      "label": "Stream",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Stream::initialize",
      "label": "Stream::initialize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Stream::close",
      "label": "Stream::close",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Stream::each",
      "label": "Stream::each",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Stream::<<",
      "label": "Stream::<<",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Stream::callback",
      "label": "Stream::callback",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Stream::closed?",
      "label": "Stream::closed?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "close",
      "label": "close",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "<<",
      "label": "<<",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "callback",
      "label": "callback",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "closed?",
      "label": "closed?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "stream",
      "label": "stream",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "cache_control",
      "label": "cache_control",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "expires",
      "label": "expires",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "last_modified",
      "label": "last_modified",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "etag",
      "label": "etag",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "back",
      "label": "back",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "informational?",
      "label": "informational?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "success?",
      "label": "success?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "redirect?",
      "label": "redirect?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "client_error?",
      "label": "client_error?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "server_error?",
      "label": "server_error?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "not_found?",
      "label": "not_found?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "bad_request?",
      "label": "bad_request?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "time_for",
      "label": "time_for",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "etag_matches?",
      "label": "etag_matches?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "with_params",
      "label": "with_params",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Templates",
      "label": "Templates",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "ContentTyped",
      "label": "ContentTyped",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "erb",
      "label": "erb",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "haml",
      "label": "haml",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "sass",
      "label": "sass",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "scss",
      "label": "scss",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "builder",
      "label": "builder",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "liquid",
      "label": "liquid",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "markdown",
      "label": "markdown",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "rdoc",
      "label": "rdoc",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "asciidoc",
      "label": "asciidoc",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "markaby",
      "label": "markaby",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "nokogiri",
      "label": "nokogiri",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "slim",
      "label": "slim",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "yajl",
      "label": "yajl",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "rabl",
      "label": "rabl",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "find_template",
      "label": "find_template",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "render_ruby",
      "label": "render_ruby",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "render",
      "label": "render",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "compile_template",
      "label": "compile_template",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "compile_block_template",
      "label": "compile_block_template",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "TemplateCache",
      "label": "TemplateCache",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "TemplateCache::initialize",
      "label": "TemplateCache::initialize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "TemplateCache::fetch",
      "label": "TemplateCache::fetch",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "TemplateCache::clear",
      "label": "TemplateCache::clear",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "fetch",
      "label": "fetch",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "clear",
      "label": "clear",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base",
      "label": "Base",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::initialize",
      "label": "Base::initialize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::call",
      "label": "Base::call",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::call!",
      "label": "Base::call!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::settings",
      "label": "Base::settings",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::halt",
      "label": "Base::halt",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::pass",
      "label": "Base::pass",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::forward",
      "label": "Base::forward",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::filter!",
      "label": "Base::filter!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::route!",
      "label": "Base::route!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::route_eval",
      "label": "Base::route_eval",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::process_route",
      "label": "Base::process_route",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::route_missing",
      "label": "Base::route_missing",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::static!",
      "label": "Base::static!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::invoke",
      "label": "Base::invoke",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::dispatch!",
      "label": "Base::dispatch!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::handle_exception!",
      "label": "Base::handle_exception!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::error_block!",
      "label": "Base::error_block!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::dump_errors!",
      "label": "Base::dump_errors!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::callers_to_ignore",
      "label": "Base::callers_to_ignore",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::reset!",
      "label": "Base::reset!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::extensions",
      "label": "Base::extensions",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::middleware",
      "label": "Base::middleware",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::set",
      "label": "Base::set",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::enable",
      "label": "Base::enable",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::disable",
      "label": "Base::disable",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::error",
      "label": "Base::error",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::not_found",
      "label": "Base::not_found",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::template",
      "label": "Base::template",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::layout",
      "label": "Base::layout",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::inline_templates=",
      "label": "Base::inline_templates=",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::mime_type",
      "label": "Base::mime_type",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::mime_types",
      "label": "Base::mime_types",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::before",
      "label": "Base::before",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::after",
      "label": "Base::after",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::add_filter",
      "label": "Base::add_filter",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::on_start",
      "label": "Base::on_start",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::on_stop",
      "label": "Base::on_stop",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::condition",
      "label": "Base::condition",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::public=",
      "label": "Base::public=",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::public_dir=",
      "label": "Base::public_dir=",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::public_dir",
      "label": "Base::public_dir",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::get",
      "label": "Base::get",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::put",
      "label": "Base::put",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::post",
      "label": "Base::post",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::delete",
      "label": "Base::delete",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::head",
      "label": "Base::head",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::options",
      "label": "Base::options",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::patch",
      "label": "Base::patch",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::link",
      "label": "Base::link",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::unlink",
      "label": "Base::unlink",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::helpers",
      "label": "Base::helpers",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::register",
      "label": "Base::register",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::development?",
      "label": "Base::development?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::production?",
      "label": "Base::production?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::test?",
      "label": "Base::test?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::configure",
      "label": "Base::configure",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::use",
      "label": "Base::use",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::quit!",
      "label": "Base::quit!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::run!",
      "label": "Base::run!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::running?",
      "label": "Base::running?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::prototype",
      "label": "Base::prototype",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::new",
      "label": "Base::new",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::build",
      "label": "Base::build",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::caller_files",
      "label": "Base::caller_files",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::start_server",
      "label": "Base::start_server",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::suppress_messages?",
      "label": "Base::suppress_messages?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::setup_traps",
      "label": "Base::setup_traps",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::define_singleton",
      "label": "Base::define_singleton",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::host_name",
      "label": "Base::host_name",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::user_agent",
      "label": "Base::user_agent",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::provides",
      "label": "Base::provides",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::route",
      "label": "Base::route",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::invoke_hook",
      "label": "Base::invoke_hook",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::generate_method",
      "label": "Base::generate_method",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::compile!",
      "label": "Base::compile!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::compile",
      "label": "Base::compile",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::setup_default_middleware",
      "label": "Base::setup_default_middleware",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::setup_middleware",
      "label": "Base::setup_middleware",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::setup_logging",
      "label": "Base::setup_logging",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::setup_null_logger",
      "label": "Base::setup_null_logger",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::setup_common_logger",
      "label": "Base::setup_common_logger",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::setup_custom_logger",
      "label": "Base::setup_custom_logger",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::setup_protection",
      "label": "Base::setup_protection",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::setup_sessions",
      "label": "Base::setup_sessions",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::inherited",
      "label": "Base::inherited",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::synchronize",
      "label": "Base::synchronize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::warn_for_deprecation",
      "label": "Base::warn_for_deprecation",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::cleaned_caller",
      "label": "Base::cleaned_caller",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Base::force_encoding",
      "label": "Base::force_encoding",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "call!",
      "label": "call!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "settings",
      "label": "settings",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "halt",
      "label": "halt",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "pass",
      "label": "pass",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "forward",
      "label": "forward",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "filter!",
      "label": "filter!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "route!",
      "label": "route!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "route_eval",
      "label": "route_eval",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "process_route",
      "label": "process_route",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "route_missing",
      "label": "route_missing",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "static!",
      "label": "static!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "invoke",
      "label": "invoke",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "dispatch!",
      "label": "dispatch!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "handle_exception!",
      "label": "handle_exception!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "error_block!",
      "label": "error_block!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "dump_errors!",
      "label": "dump_errors!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "callers_to_ignore",
      "label": "callers_to_ignore",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "reset!",
      "label": "reset!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "extensions",
      "label": "extensions",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "middleware",
      "label": "middleware",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "set",
      "label": "set",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "enable",
      "label": "enable",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "disable",
      "label": "disable",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "template",
      "label": "template",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "layout",
      "label": "layout",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "inline_templates=",
      "label": "inline_templates=",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "mime_types",
      "label": "mime_types",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "before",
      "label": "before",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "after",
      "label": "after",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "add_filter",
      "label": "add_filter",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "on_start",
      "label": "on_start",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "on_stop",
      "label": "on_stop",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "condition",
      "label": "condition",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "public=",
      "label": "public=",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "public_dir=",
      "label": "public_dir=",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "public_dir",
      "label": "public_dir",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "get",
      "label": "get",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "put",
      "label": "put",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "post",
      "label": "post",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "delete",
      "label": "delete",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "head",
      "label": "head",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "options",
      "label": "options",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "patch",
      "label": "patch",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "link",
      "label": "link",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "unlink",
      "label": "unlink",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "helpers",
      "label": "helpers",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "register",
      "label": "register",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "development?",
      "label": "development?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "production?",
      "label": "production?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "test?",
      "label": "test?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "configure",
      "label": "configure",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "use",
      "label": "use",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "quit!",
      "label": "quit!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "run!",
      "label": "run!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "running?",
      "label": "running?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "prototype",
      "label": "prototype",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "new",
      "label": "new",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "build",
      "label": "build",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "caller_files",
      "label": "caller_files",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "start_server",
      "label": "start_server",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "suppress_messages?",
      "label": "suppress_messages?",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_traps",
      "label": "setup_traps",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "define_singleton",
      "label": "define_singleton",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "host_name",
      "label": "host_name",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "user_agent",
      "label": "user_agent",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "provides",
      "label": "provides",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "route",
      "label": "route",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "invoke_hook",
      "label": "invoke_hook",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "generate_method",
      "label": "generate_method",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "compile!",
      "label": "compile!",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "compile",
      "label": "compile",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_default_middleware",
      "label": "setup_default_middleware",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_middleware",
      "label": "setup_middleware",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_logging",
      "label": "setup_logging",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_null_logger",
      "label": "setup_null_logger",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_common_logger",
      "label": "setup_common_logger",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_custom_logger",
      "label": "setup_custom_logger",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_protection",
      "label": "setup_protection",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "setup_sessions",
      "label": "setup_sessions",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "inherited",
      "label": "inherited",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "synchronize",
      "label": "synchronize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "warn_for_deprecation",
      "label": "warn_for_deprecation",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "cleaned_caller",
      "label": "cleaned_caller",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "force_encoding",
      "label": "force_encoding",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Application",
      "label": "Application",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Delegator",
      "label": "Delegator",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Wrapper",
      "label": "Wrapper",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Wrapper::initialize",
      "label": "Wrapper::initialize",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Wrapper::settings",
      "label": "Wrapper::settings",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Wrapper::helpers",
      "label": "Wrapper::helpers",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Wrapper::call",
      "label": "Wrapper::call",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "Wrapper::inspect",
      "label": "Wrapper::inspect",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "inspect",
      "label": "inspect",
      "file": "rb-code/sinatra/lib/sinatra/base.rb"
    },
    {
      "id": "IndifferentHash",
      "label": "IndifferentHash",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::default",
      "label": "IndifferentHash::default",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::default=",
      "label": "IndifferentHash::default=",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::assoc",
      "label": "IndifferentHash::assoc",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::rassoc",
      "label": "IndifferentHash::rassoc",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::fetch",
      "label": "IndifferentHash::fetch",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::[]",
      "label": "IndifferentHash::[]",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::[]=",
      "label": "IndifferentHash::[]=",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::key",
      "label": "IndifferentHash::key",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::key?",
      "label": "IndifferentHash::key?",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::value?",
      "label": "IndifferentHash::value?",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::delete",
      "label": "IndifferentHash::delete",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::dig",
      "label": "IndifferentHash::dig",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::fetch_values",
      "label": "IndifferentHash::fetch_values",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::slice",
      "label": "IndifferentHash::slice",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::values_at",
      "label": "IndifferentHash::values_at",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::merge!",
      "label": "IndifferentHash::merge!",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::merge",
      "label": "IndifferentHash::merge",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::replace",
      "label": "IndifferentHash::replace",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::transform_values",
      "label": "IndifferentHash::transform_values",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::transform_values!",
      "label": "IndifferentHash::transform_values!",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::transform_keys",
      "label": "IndifferentHash::transform_keys",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::transform_keys!",
      "label": "IndifferentHash::transform_keys!",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::select",
      "label": "IndifferentHash::select",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::reject",
      "label": "IndifferentHash::reject",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::compact",
      "label": "IndifferentHash::compact",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::except",
      "label": "IndifferentHash::except",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::convert_key",
      "label": "IndifferentHash::convert_key",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "IndifferentHash::convert_value",
      "label": "IndifferentHash::convert_value",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "default",
      "label": "default",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "default=",
      "label": "default=",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "assoc",
      "label": "assoc",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "rassoc",
      "label": "rassoc",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "[]",
      "label": "[]",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "[]=",
      "label": "[]=",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "key",
      "label": "key",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "key?",
      "label": "key?",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "value?",
      "label": "value?",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "dig",
      "label": "dig",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "fetch_values",
      "label": "fetch_values",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "slice",
      "label": "slice",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "values_at",
      "label": "values_at",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "merge!",
      "label": "merge!",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "merge",
      "label": "merge",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "replace",
      "label": "replace",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "transform_values",
      "label": "transform_values",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "transform_values!",
      "label": "transform_values!",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "transform_keys",
      "label": "transform_keys",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "transform_keys!",
      "label": "transform_keys!",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "select",
      "label": "select",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "reject",
      "label": "reject",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "compact",
      "label": "compact",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "except",
      "label": "except",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "convert_key",
      "label": "convert_key",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "convert_value",
      "label": "convert_value",
      "file": "rb-code/sinatra/lib/sinatra/indifferent_hash.rb"
    },
    {
      "id": "Builder",
      "label": "Builder",
      "file": "rb-code/sinatra/lib/sinatra/main.rb"
    },
    {
      "id": "Middleware",
      "label": "Middleware",
      "file": "rb-code/sinatra/lib/sinatra/middleware/logger.rb"
    },
    {
      "id": "Logger",
      "label": "Logger",
      "file": "rb-code/sinatra/lib/sinatra/middleware/logger.rb"
    },
    {
      "id": "Logger::initialize",
      "label": "Logger::initialize",
      "file": "rb-code/sinatra/lib/sinatra/middleware/logger.rb"
    },
    {
      "id": "Logger::call",
      "label": "Logger::call",
      "file": "rb-code/sinatra/lib/sinatra/middleware/logger.rb"
    },
    {
      "id": "ShowExceptions",
      "label": "ShowExceptions",
      "file": "rb-code/sinatra/lib/sinatra/show_exceptions.rb"
    },
    {
      "id": "ShowExceptions::initialize",
      "label": "ShowExceptions::initialize",
      "file": "rb-code/sinatra/lib/sinatra/show_exceptions.rb"
    },
    {
      "id": "ShowExceptions::call",
      "label": "ShowExceptions::call",
      "file": "rb-code/sinatra/lib/sinatra/show_exceptions.rb"
    },
    {
      "id": "ShowExceptions::template",
      "label": "ShowExceptions::template",
      "file": "rb-code/sinatra/lib/sinatra/show_exceptions.rb"
    },
    {
      "id": "ShowExceptions::bad_request?",
      "label": "ShowExceptions::bad_request?",
      "file": "rb-code/sinatra/lib/sinatra/show_exceptions.rb"
    },
    {
      "id": "ShowExceptions::prefers_plain_text?",
      "label": "ShowExceptions::prefers_plain_text?",
      "file": "rb-code/sinatra/lib/sinatra/show_exceptions.rb"
    },
    {
      "id": "ShowExceptions::frame_class",
      "label": "ShowExceptions::frame_class",
      "file": "rb-code/sinatra/lib/sinatra/show_exceptions.rb"
    },
    {
      "id": "prefers_plain_text?",
      "label": "prefers_plain_text?",
      "file": "rb-code/sinatra/lib/sinatra/show_exceptions.rb"
    },
    {
      "id": "frame_class",
      "label": "frame_class",
      "file": "rb-code/sinatra/lib/sinatra/show_exceptions.rb"
    },
    {
      "id": "Rack",
      "label": "Rack",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "Protection",
      "label": "Protection",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken",
      "label": "AuthenticityToken",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::accepts?",
      "label": "AuthenticityToken::accepts?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::mask_authenticity_token",
      "label": "AuthenticityToken::mask_authenticity_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::set_token",
      "label": "AuthenticityToken::set_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::valid_token?",
      "label": "AuthenticityToken::valid_token?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::mask_token",
      "label": "AuthenticityToken::mask_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::unmask_token",
      "label": "AuthenticityToken::unmask_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::unmasked_token?",
      "label": "AuthenticityToken::unmasked_token?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::masked_token?",
      "label": "AuthenticityToken::masked_token?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::compare_with_real_token",
      "label": "AuthenticityToken::compare_with_real_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::compare_with_global_token",
      "label": "AuthenticityToken::compare_with_global_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::compare_with_per_form_token",
      "label": "AuthenticityToken::compare_with_per_form_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::real_token",
      "label": "AuthenticityToken::real_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::global_token",
      "label": "AuthenticityToken::global_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::per_form_token",
      "label": "AuthenticityToken::per_form_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::encode_token",
      "label": "AuthenticityToken::encode_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::decode_token",
      "label": "AuthenticityToken::decode_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::token_hmac",
      "label": "AuthenticityToken::token_hmac",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "AuthenticityToken::xor_byte_strings",
      "label": "AuthenticityToken::xor_byte_strings",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "mask_authenticity_token",
      "label": "mask_authenticity_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "set_token",
      "label": "set_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "valid_token?",
      "label": "valid_token?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "mask_token",
      "label": "mask_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "unmask_token",
      "label": "unmask_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "unmasked_token?",
      "label": "unmasked_token?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "masked_token?",
      "label": "masked_token?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "compare_with_real_token",
      "label": "compare_with_real_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "compare_with_global_token",
      "label": "compare_with_global_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "compare_with_per_form_token",
      "label": "compare_with_per_form_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "real_token",
      "label": "real_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "global_token",
      "label": "global_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "per_form_token",
      "label": "per_form_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "encode_token",
      "label": "encode_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "decode_token",
      "label": "decode_token",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "token_hmac",
      "label": "token_hmac",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "xor_byte_strings",
      "label": "xor_byte_strings",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/authenticity_token.rb"
    },
    {
      "id": "Base::default_options",
      "label": "Base::default_options",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::safe?",
      "label": "Base::safe?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::accepts?",
      "label": "Base::accepts?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::react",
      "label": "Base::react",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::warn",
      "label": "Base::warn",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::instrument",
      "label": "Base::instrument",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::deny",
      "label": "Base::deny",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::report",
      "label": "Base::report",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::session?",
      "label": "Base::session?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::session",
      "label": "Base::session",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::drop_session",
      "label": "Base::drop_session",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::referrer",
      "label": "Base::referrer",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::origin",
      "label": "Base::origin",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::random_string",
      "label": "Base::random_string",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::encrypt",
      "label": "Base::encrypt",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::secure_compare",
      "label": "Base::secure_compare",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "Base::html?",
      "label": "Base::html?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "default_options",
      "label": "default_options",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "react",
      "label": "react",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "warn",
      "label": "warn",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "instrument",
      "label": "instrument",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "deny",
      "label": "deny",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "report",
      "label": "report",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "session?",
      "label": "session?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "drop_session",
      "label": "drop_session",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "referrer",
      "label": "referrer",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "origin",
      "label": "origin",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "random_string",
      "label": "random_string",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "encrypt",
      "label": "encrypt",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "secure_compare",
      "label": "secure_compare",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "html?",
      "label": "html?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/base.rb"
    },
    {
      "id": "ContentSecurityPolicy",
      "label": "ContentSecurityPolicy",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/content_security_policy.rb"
    },
    {
      "id": "ContentSecurityPolicy::csp_policy",
      "label": "ContentSecurityPolicy::csp_policy",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/content_security_policy.rb"
    },
    {
      "id": "ContentSecurityPolicy::call",
      "label": "ContentSecurityPolicy::call",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/content_security_policy.rb"
    },
    {
      "id": "csp_policy",
      "label": "csp_policy",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/content_security_policy.rb"
    },
    {
      "id": "CookieTossing",
      "label": "CookieTossing",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "CookieTossing::call",
      "label": "CookieTossing::call",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "CookieTossing::accepts?",
      "label": "CookieTossing::accepts?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "CookieTossing::remove_bad_cookies",
      "label": "CookieTossing::remove_bad_cookies",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "CookieTossing::redirect",
      "label": "CookieTossing::redirect",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "CookieTossing::bad_cookies",
      "label": "CookieTossing::bad_cookies",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "CookieTossing::cookie_paths",
      "label": "CookieTossing::cookie_paths",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "CookieTossing::empty_cookie",
      "label": "CookieTossing::empty_cookie",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "CookieTossing::session_key",
      "label": "CookieTossing::session_key",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "remove_bad_cookies",
      "label": "remove_bad_cookies",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "bad_cookies",
      "label": "bad_cookies",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "cookie_paths",
      "label": "cookie_paths",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "empty_cookie",
      "label": "empty_cookie",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "session_key",
      "label": "session_key",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/cookie_tossing.rb"
    },
    {
      "id": "EscapedParams",
      "label": "EscapedParams",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "EscapedParams::initialize",
      "label": "EscapedParams::initialize",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "EscapedParams::call",
      "label": "EscapedParams::call",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "EscapedParams::handle",
      "label": "EscapedParams::handle",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "EscapedParams::escape",
      "label": "EscapedParams::escape",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "EscapedParams::escape_hash",
      "label": "EscapedParams::escape_hash",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "EscapedParams::escape_string",
      "label": "EscapedParams::escape_string",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "handle",
      "label": "handle",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "escape",
      "label": "escape",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "escape_hash",
      "label": "escape_hash",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "escape_string",
      "label": "escape_string",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/escaped_params.rb"
    },
    {
      "id": "FormToken",
      "label": "FormToken",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/form_token.rb"
    },
    {
      "id": "FormToken::accepts?",
      "label": "FormToken::accepts?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/form_token.rb"
    },
    {
      "id": "FrameOptions",
      "label": "FrameOptions",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/frame_options.rb"
    },
    {
      "id": "FrameOptions::frame_options",
      "label": "FrameOptions::frame_options",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/frame_options.rb"
    },
    {
      "id": "FrameOptions::call",
      "label": "FrameOptions::call",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/frame_options.rb"
    },
    {
      "id": "frame_options",
      "label": "frame_options",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/frame_options.rb"
    },
    {
      "id": "HttpOrigin",
      "label": "HttpOrigin",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/http_origin.rb"
    },
    {
      "id": "HttpOrigin::base_url",
      "label": "HttpOrigin::base_url",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/http_origin.rb"
    },
    {
      "id": "HttpOrigin::accepts?",
      "label": "HttpOrigin::accepts?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/http_origin.rb"
    },
    {
      "id": "base_url",
      "label": "base_url",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/http_origin.rb"
    },
    {
      "id": "IPSpoofing",
      "label": "IPSpoofing",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/ip_spoofing.rb"
    },
    {
      "id": "IPSpoofing::accepts?",
      "label": "IPSpoofing::accepts?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/ip_spoofing.rb"
    },
    {
      "id": "JsonCsrf",
      "label": "JsonCsrf",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/json_csrf.rb"
    },
    {
      "id": "JsonCsrf::call",
      "label": "JsonCsrf::call",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/json_csrf.rb"
    },
    {
      "id": "JsonCsrf::has_vector?",
      "label": "JsonCsrf::has_vector?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/json_csrf.rb"
    },
    {
      "id": "JsonCsrf::react_and_close",
      "label": "JsonCsrf::react_and_close",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/json_csrf.rb"
    },
    {
      "id": "JsonCsrf::close_body",
      "label": "JsonCsrf::close_body",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/json_csrf.rb"
    },
    {
      "id": "has_vector?",
      "label": "has_vector?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/json_csrf.rb"
    },
    {
      "id": "react_and_close",
      "label": "react_and_close",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/json_csrf.rb"
    },
    {
      "id": "close_body",
      "label": "close_body",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/json_csrf.rb"
    },
    {
      "id": "PathTraversal",
      "label": "PathTraversal",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/path_traversal.rb"
    },
    {
      "id": "PathTraversal::call",
      "label": "PathTraversal::call",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/path_traversal.rb"
    },
    {
      "id": "PathTraversal::cleanup",
      "label": "PathTraversal::cleanup",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/path_traversal.rb"
    },
    {
      "id": "cleanup",
      "label": "cleanup",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/path_traversal.rb"
    },
    {
      "id": "ReferrerPolicy",
      "label": "ReferrerPolicy",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/referrer_policy.rb"
    },
    {
      "id": "ReferrerPolicy::call",
      "label": "ReferrerPolicy::call",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/referrer_policy.rb"
    },
    {
      "id": "RemoteReferrer",
      "label": "RemoteReferrer",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/remote_referrer.rb"
    },
    {
      "id": "RemoteReferrer::accepts?",
      "label": "RemoteReferrer::accepts?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/remote_referrer.rb"
    },
    {
      "id": "RemoteToken",
      "label": "RemoteToken",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/remote_token.rb"
    },
    {
      "id": "RemoteToken::accepts?",
      "label": "RemoteToken::accepts?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/remote_token.rb"
    },
    {
      "id": "SessionHijacking",
      "label": "SessionHijacking",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/session_hijacking.rb"
    },
    {
      "id": "SessionHijacking::accepts?",
      "label": "SessionHijacking::accepts?",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/session_hijacking.rb"
    },
    {
      "id": "SessionHijacking::encode",
      "label": "SessionHijacking::encode",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/session_hijacking.rb"
    },
    {
      "id": "encode",
      "label": "encode",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/session_hijacking.rb"
    },
    {
      "id": "StrictTransport",
      "label": "StrictTransport",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/strict_transport.rb"
    },
    {
      "id": "StrictTransport::strict_transport",
      "label": "StrictTransport::strict_transport",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/strict_transport.rb"
    },
    {
      "id": "StrictTransport::call",
      "label": "StrictTransport::call",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/strict_transport.rb"
    },
    {
      "id": "strict_transport",
      "label": "strict_transport",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/strict_transport.rb"
    },
    {
      "id": "XSSHeader",
      "label": "XSSHeader",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/xss_header.rb"
    },
    {
      "id": "XSSHeader::call",
      "label": "XSSHeader::call",
      "file": "rb-code/sinatra/rack-protection/lib/rack/protection/xss_header.rb"
    },
    {
      "id": "DummyAppWithBody",
      "label": "DummyAppWithBody",
      "file": "rb-code/sinatra/rack-protection/spec/lib/rack/protection/json_csrf_spec.rb"
    },
    {
      "id": "Closeable",
      "label": "Closeable",
      "file": "rb-code/sinatra/rack-protection/spec/lib/rack/protection/json_csrf_spec.rb"
    },
    {
      "id": "DummyApp",
      "label": "DummyApp",
      "file": "rb-code/sinatra/rack-protection/spec/support/dummy_app.rb"
    },
    {
      "id": "NotImplementedAsPending",
      "label": "NotImplementedAsPending",
      "file": "rb-code/sinatra/rack-protection/spec/support/not_implemented_as_pending.rb"
    },
    {
      "id": "SpecHelpers",
      "label": "SpecHelpers",
      "file": "rb-code/sinatra/rack-protection/spec/support/spec_helpers.rb"
    },
    {
      "id": "app",
      "label": "app",
      "file": "rb-code/sinatra/rack-protection/spec/support/spec_helpers.rb"
    },
    {
      "id": "mock_app",
      "label": "mock_app",
      "file": "rb-code/sinatra/rack-protection/spec/support/spec_helpers.rb"
    },
    {
      "id": "with_headers",
      "label": "with_headers",
      "file": "rb-code/sinatra/rack-protection/spec/support/spec_helpers.rb"
    },
    {
      "id": "env",
      "label": "env",
      "file": "rb-code/sinatra/rack-protection/spec/support/spec_helpers.rb"
    },
    {
      "id": "Capture",
      "label": "Capture",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/capture.rb"
    },
    {
      "id": "capture",
      "label": "capture",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/capture.rb"
    },
    {
      "id": "capture_later",
      "label": "capture_later",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/capture.rb"
    },
    {
      "id": "ConfigFile",
      "label": "ConfigFile",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/config_file.rb"
    },
    {
      "id": "config_file",
      "label": "config_file",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/config_file.rb"
    },
    {
      "id": "UnsupportedConfigType",
      "label": "UnsupportedConfigType",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/config_file.rb"
    },
    {
      "id": "UnsupportedConfigType::message",
      "label": "UnsupportedConfigType::message",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/config_file.rb"
    },
    {
      "id": "message",
      "label": "message",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/config_file.rb"
    },
    {
      "id": "config_for_env",
      "label": "config_for_env",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/config_file.rb"
    },
    {
      "id": "from_environment_key",
      "label": "from_environment_key",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/config_file.rb"
    },
    {
      "id": "environment_keys?",
      "label": "environment_keys?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/config_file.rb"
    },
    {
      "id": "ContentFor",
      "label": "ContentFor",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/content_for.rb"
    },
    {
      "id": "content_for",
      "label": "content_for",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/content_for.rb"
    },
    {
      "id": "content_for?",
      "label": "content_for?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/content_for.rb"
    },
    {
      "id": "clear_content_for",
      "label": "clear_content_for",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/content_for.rb"
    },
    {
      "id": "yield_content",
      "label": "yield_content",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/content_for.rb"
    },
    {
      "id": "content_blocks",
      "label": "content_blocks",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/content_for.rb"
    },
    {
      "id": "Contrib",
      "label": "Contrib",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/contrib/setup.rb"
    },
    {
      "id": "Loader",
      "label": "Loader",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/contrib/setup.rb"
    },
    {
      "id": "autoload",
      "label": "autoload",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/contrib/setup.rb"
    },
    {
      "id": "registered",
      "label": "registered",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/contrib/setup.rb"
    },
    {
      "id": "Common",
      "label": "Common",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/contrib/setup.rb"
    },
    {
      "id": "Custom",
      "label": "Custom",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/contrib/setup.rb"
    },
    {
      "id": "All",
      "label": "All",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/contrib/setup.rb"
    },
    {
      "id": "Cookies",
      "label": "Cookies",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar",
      "label": "Jar",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::initialize",
      "label": "Jar::initialize",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::==",
      "label": "Jar::==",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::[]",
      "label": "Jar::[]",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::[]=",
      "label": "Jar::[]=",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::assoc",
      "label": "Jar::assoc",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::clear",
      "label": "Jar::clear",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::compare_by_identity?",
      "label": "Jar::compare_by_identity?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::default",
      "label": "Jar::default",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::delete",
      "label": "Jar::delete",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::delete_if",
      "label": "Jar::delete_if",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::each",
      "label": "Jar::each",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::each_key",
      "label": "Jar::each_key",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::each_value",
      "label": "Jar::each_value",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::empty?",
      "label": "Jar::empty?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::fetch",
      "label": "Jar::fetch",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::flatten",
      "label": "Jar::flatten",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::has_key?",
      "label": "Jar::has_key?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::has_value?",
      "label": "Jar::has_value?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::hash",
      "label": "Jar::hash",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::inspect",
      "label": "Jar::inspect",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::invert",
      "label": "Jar::invert",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::keep_if",
      "label": "Jar::keep_if",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::key",
      "label": "Jar::key",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::keys",
      "label": "Jar::keys",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::length",
      "label": "Jar::length",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::merge",
      "label": "Jar::merge",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::merge!",
      "label": "Jar::merge!",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::rassoc",
      "label": "Jar::rassoc",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::rehash",
      "label": "Jar::rehash",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::reject",
      "label": "Jar::reject",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::replace",
      "label": "Jar::replace",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::select",
      "label": "Jar::select",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::set",
      "label": "Jar::set",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::shift",
      "label": "Jar::shift",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::sort",
      "label": "Jar::sort",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::to_hash",
      "label": "Jar::to_hash",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::to_a",
      "label": "Jar::to_a",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::to_s",
      "label": "Jar::to_s",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::values",
      "label": "Jar::values",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::values_at",
      "label": "Jar::values_at",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::warn",
      "label": "Jar::warn",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::deleted",
      "label": "Jar::deleted",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::response_cookies",
      "label": "Jar::response_cookies",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::parse_response",
      "label": "Jar::parse_response",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "Jar::request_cookies",
      "label": "Jar::request_cookies",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "==",
      "label": "==",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "compare_by_identity?",
      "label": "compare_by_identity?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "delete_if",
      "label": "delete_if",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "each_key",
      "label": "each_key",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "each_value",
      "label": "each_value",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "empty?",
      "label": "empty?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "flatten",
      "label": "flatten",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "has_key?",
      "label": "has_key?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "has_value?",
      "label": "has_value?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "hash",
      "label": "hash",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "invert",
      "label": "invert",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "keep_if",
      "label": "keep_if",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "keys",
      "label": "keys",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "length",
      "label": "length",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "rehash",
      "label": "rehash",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "shift",
      "label": "shift",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "sort",
      "label": "sort",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "to_hash",
      "label": "to_hash",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "to_a",
      "label": "to_a",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "values",
      "label": "values",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "deleted",
      "label": "deleted",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "response_cookies",
      "label": "response_cookies",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "parse_response",
      "label": "parse_response",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "request_cookies",
      "label": "request_cookies",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "cookies",
      "label": "cookies",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/cookies.rb"
    },
    {
      "id": "CustomLogger",
      "label": "CustomLogger",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/custom_logger.rb"
    },
    {
      "id": "EngineTracking",
      "label": "EngineTracking",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "erb?",
      "label": "erb?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "erubi?",
      "label": "erubi?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "haml?",
      "label": "haml?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "sass?",
      "label": "sass?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "scss?",
      "label": "scss?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "builder?",
      "label": "builder?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "liquid?",
      "label": "liquid?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "markdown?",
      "label": "markdown?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "rdoc?",
      "label": "rdoc?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "markaby?",
      "label": "markaby?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "nokogiri?",
      "label": "nokogiri?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "slim?",
      "label": "slim?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "ruby?",
      "label": "ruby?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "with_engine",
      "label": "with_engine",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/engine_tracking.rb"
    },
    {
      "id": "Extension",
      "label": "Extension",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/extension.rb"
    },
    {
      "id": "record",
      "label": "record",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/extension.rb"
    },
    {
      "id": "replay",
      "label": "replay",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/extension.rb"
    },
    {
      "id": "recorded_methods",
      "label": "recorded_methods",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/extension.rb"
    },
    {
      "id": "DontCall",
      "label": "DontCall",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/extension.rb"
    },
    {
      "id": "DontCall::initialize",
      "label": "DontCall::initialize",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/extension.rb"
    },
    {
      "id": "DontCall::method_missing",
      "label": "DontCall::method_missing",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/extension.rb"
    },
    {
      "id": "DontCall::inspect",
      "label": "DontCall::inspect",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/extension.rb"
    },
    {
      "id": "HamlHelpers",
      "label": "HamlHelpers",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/haml_helpers.rb"
    },
    {
      "id": "surround",
      "label": "surround",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/haml_helpers.rb"
    },
    {
      "id": "precede",
      "label": "precede",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/haml_helpers.rb"
    },
    {
      "id": "succeed",
      "label": "succeed",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/haml_helpers.rb"
    },
    {
      "id": "_capture_haml",
      "label": "_capture_haml",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/haml_helpers.rb"
    },
    {
      "id": "JSON",
      "label": "JSON",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/json.rb"
    },
    {
      "id": "json",
      "label": "json",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/json.rb"
    },
    {
      "id": "resolve_content_type",
      "label": "resolve_content_type",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/json.rb"
    },
    {
      "id": "resolve_encoder",
      "label": "resolve_encoder",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/json.rb"
    },
    {
      "id": "resolve_encoder_action",
      "label": "resolve_encoder_action",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/json.rb"
    },
    {
      "id": "LinkHeader",
      "label": "LinkHeader",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/link_header.rb"
    },
    {
      "id": "prefetch",
      "label": "prefetch",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/link_header.rb"
    },
    {
      "id": "stylesheet",
      "label": "stylesheet",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/link_header.rb"
    },
    {
      "id": "link_headers",
      "label": "link_headers",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/link_header.rb"
    },
    {
      "id": "MultiRoute",
      "label": "MultiRoute",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/multi_route.rb"
    },
    {
      "id": "route_args",
      "label": "route_args",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/multi_route.rb"
    },
    {
      "id": "Namespace",
      "label": "Namespace",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "InstanceMethods",
      "label": "InstanceMethods",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "template_cache",
      "label": "template_cache",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "redirect_to",
      "label": "redirect_to",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "SharedMethods",
      "label": "SharedMethods",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "namespace",
      "label": "namespace",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "NamespacedMethods",
      "label": "NamespacedMethods",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "errors",
      "label": "errors",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "namespace_errors",
      "label": "namespace_errors",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "respond_to",
      "label": "respond_to",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "pattern",
      "label": "pattern",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "prefixed_path",
      "label": "prefixed_path",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "prefixed",
      "label": "prefixed",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "BaseMethods",
      "label": "BaseMethods",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/namespace.rb"
    },
    {
      "id": "QuietLogger",
      "label": "QuietLogger",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/quiet_logger.rb"
    },
    {
      "id": "log",
      "label": "log",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/quiet_logger.rb"
    },
    {
      "id": "Reloader",
      "label": "Reloader",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher",
      "label": "Watcher",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Element",
      "label": "Element",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "List",
      "label": "List",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "List::initialize",
      "label": "List::initialize",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "List::watch",
      "label": "List::watch",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "List::ignore",
      "label": "List::ignore",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "List::watcher_for",
      "label": "List::watcher_for",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "List::watchers",
      "label": "List::watchers",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "List::updated",
      "label": "List::updated",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::initialize",
      "label": "Watcher::initialize",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::watch",
      "label": "Watcher::watch",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::ignore",
      "label": "Watcher::ignore",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::watcher_for",
      "label": "Watcher::watcher_for",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::watchers",
      "label": "Watcher::watchers",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::updated",
      "label": "Watcher::updated",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::updated?",
      "label": "Watcher::updated?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::update",
      "label": "Watcher::update",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::inline_templates?",
      "label": "Watcher::inline_templates?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::ignore?",
      "label": "Watcher::ignore?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "Watcher::removed?",
      "label": "Watcher::removed?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "watch",
      "label": "watch",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "ignore",
      "label": "ignore",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "watcher_for",
      "label": "watcher_for",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "watchers",
      "label": "watchers",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "updated",
      "label": "updated",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "updated?",
      "label": "updated?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "update",
      "label": "update",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "inline_templates?",
      "label": "inline_templates?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "ignore?",
      "label": "ignore?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "removed?",
      "label": "removed?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "after_reload",
      "label": "after_reload",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "ExtensionMethods",
      "label": "ExtensionMethods",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "deactivate",
      "label": "deactivate",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "also_reload",
      "label": "also_reload",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "dont_reload",
      "label": "dont_reload",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "register_path",
      "label": "register_path",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "start_registering_extension",
      "label": "start_registering_extension",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "stop_registering_extension",
      "label": "stop_registering_extension",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "registering_extension?",
      "label": "registering_extension?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "watch_element",
      "label": "watch_element",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/reloader.rb"
    },
    {
      "id": "RequiredParams",
      "label": "RequiredParams",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/required_params.rb"
    },
    {
      "id": "required_params",
      "label": "required_params",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/required_params.rb"
    },
    {
      "id": "_required_params",
      "label": "_required_params",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/required_params.rb"
    },
    {
      "id": "RespondWith",
      "label": "RespondWith",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "Format",
      "label": "Format",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "Format::initialize",
      "label": "Format::initialize",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "Format::on",
      "label": "Format::on",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "Format::finish",
      "label": "Format::finish",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "Format::method_missing",
      "label": "Format::method_missing",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "on",
      "label": "on",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "respond_with",
      "label": "respond_with",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "template_for",
      "label": "template_for",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "remap_extensions",
      "label": "remap_extensions",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "rendering_method",
      "label": "rendering_method",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/respond_with.rb"
    },
    {
      "id": "Runner",
      "label": "Runner",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::app_file",
      "label": "Runner::app_file",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::run",
      "label": "Runner::run",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::kill",
      "label": "Runner::kill",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::get",
      "label": "Runner::get",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::get_stream",
      "label": "Runner::get_stream",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::get_response",
      "label": "Runner::get_response",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::log",
      "label": "Runner::log",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::start",
      "label": "Runner::start",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::command",
      "label": "Runner::command",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::ping",
      "label": "Runner::ping",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::alive?",
      "label": "Runner::alive?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::ping_path",
      "label": "Runner::ping_path",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::port",
      "label": "Runner::port",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::protocol",
      "label": "Runner::protocol",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::get_url",
      "label": "Runner::get_url",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Runner::get_https_url",
      "label": "Runner::get_https_url",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "app_file",
      "label": "app_file",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "run",
      "label": "run",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "kill",
      "label": "kill",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "get_stream",
      "label": "get_stream",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "get_response",
      "label": "get_response",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "start",
      "label": "start",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "command",
      "label": "command",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "ping",
      "label": "ping",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "alive?",
      "label": "alive?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "ping_path",
      "label": "ping_path",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "port",
      "label": "port",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "protocol",
      "label": "protocol",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "get_url",
      "label": "get_url",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "get_https_url",
      "label": "get_https_url",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/runner.rb"
    },
    {
      "id": "Streaming",
      "label": "Streaming",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "map",
      "label": "map",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "map!",
      "label": "map!",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "write",
      "label": "write",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "print",
      "label": "print",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "printf",
      "label": "printf",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "putc",
      "label": "putc",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "puts",
      "label": "puts",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "close_read",
      "label": "close_read",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "closed_read?",
      "label": "closed_read?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "closed_write?",
      "label": "closed_write?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "external_encoding",
      "label": "external_encoding",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "rewind",
      "label": "rewind",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "not_open_for_reading",
      "label": "not_open_for_reading",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "enum_not_open_for_reading",
      "label": "enum_not_open_for_reading",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "dummy",
      "label": "dummy",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "seek",
      "label": "seek",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "sync",
      "label": "sync",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "tty?",
      "label": "tty?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/streaming.rb"
    },
    {
      "id": "TestHelpers",
      "label": "TestHelpers",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/test_helpers.rb"
    },
    {
      "id": "app=",
      "label": "app=",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/test_helpers.rb"
    },
    {
      "id": "last_request?",
      "label": "last_request?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/test_helpers.rb"
    },
    {
      "id": "last_env",
      "label": "last_env",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/test_helpers.rb"
    },
    {
      "id": "WebDAV",
      "label": "WebDAV",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "propfind?",
      "label": "propfind?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "proppatch?",
      "label": "proppatch?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "mkcol?",
      "label": "mkcol?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "copy?",
      "label": "copy?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "move?",
      "label": "move?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "unlock?",
      "label": "unlock?",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "propfind",
      "label": "propfind",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "proppatch",
      "label": "proppatch",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "mkcol",
      "label": "mkcol",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "copy",
      "label": "copy",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "move",
      "label": "move",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "unlock",
      "label": "unlock",
      "file": "rb-code/sinatra/sinatra-contrib/lib/sinatra/webdav.rb"
    },
    {
      "id": "cookie_route",
      "label": "cookie_route",
      "file": "rb-code/sinatra/sinatra-contrib/spec/cookies_spec.rb"
    },
    {
      "id": "ExampleExtension",
      "label": "ExampleExtension",
      "file": "rb-code/sinatra/sinatra-contrib/spec/extension_spec.rb"
    },
    {
      "id": "results_in",
      "label": "results_in",
      "file": "rb-code/sinatra/sinatra-contrib/spec/json_spec.rb"
    },
    {
      "id": "foo",
      "label": "foo",
      "file": "rb-code/sinatra/sinatra-contrib/spec/namespace_spec.rb"
    },
    {
      "id": "magic",
      "label": "magic",
      "file": "rb-code/sinatra/sinatra-contrib/spec/namespace_spec.rb"
    },
    {
      "id": "AError",
      "label": "AError",
      "file": "rb-code/sinatra/sinatra-contrib/spec/namespace_spec.rb"
    },
    {
      "id": "BError",
      "label": "BError",
      "file": "rb-code/sinatra/sinatra-contrib/spec/namespace_spec.rb"
    },
    {
      "id": "CError",
      "label": "CError",
      "file": "rb-code/sinatra/sinatra-contrib/spec/namespace_spec.rb"
    },
    {
      "id": "dump_args",
      "label": "dump_args",
      "file": "rb-code/sinatra/sinatra-contrib/spec/namespace_spec.rb"
    },
    {
      "id": "OkJson",
      "label": "OkJson",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "decode",
      "label": "decode",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "textparse",
      "label": "textparse",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "valparse",
      "label": "valparse",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "objparse",
      "label": "objparse",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "pairparse",
      "label": "pairparse",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "arrparse",
      "label": "arrparse",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "eat",
      "label": "eat",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "lex",
      "label": "lex",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "tok",
      "label": "tok",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "nulltok",
      "label": "nulltok",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "truetok",
      "label": "truetok",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "falsetok",
      "label": "falsetok",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "numtok",
      "label": "numtok",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "strtok",
      "label": "strtok",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "abbrev",
      "label": "abbrev",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "unquote",
      "label": "unquote",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "ucharenc",
      "label": "ucharenc",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "hexdec4",
      "label": "hexdec4",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "subst",
      "label": "subst",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "unsubst",
      "label": "unsubst",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "surrogate?",
      "label": "surrogate?",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "nibble",
      "label": "nibble",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "valenc",
      "label": "valenc",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "objenc",
      "label": "objenc",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "arrenc",
      "label": "arrenc",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "keyenc",
      "label": "keyenc",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "strenc",
      "label": "strenc",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "hexenc4",
      "label": "hexenc4",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "numenc",
      "label": "numenc",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "uchardec",
      "label": "uchardec",
      "file": "rb-code/sinatra/sinatra-contrib/spec/okjson.rb"
    },
    {
      "id": "tmp_dir",
      "label": "tmp_dir",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "app_file_path",
      "label": "app_file_path",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "app_name",
      "label": "app_name",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "app_const",
      "label": "app_const",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "write_app_file",
      "label": "write_app_file",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "update_file",
      "label": "update_file",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "setup_example_app",
      "label": "setup_example_app",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "RouteExtension",
      "label": "RouteExtension",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "MiddlewareExtension",
      "label": "MiddlewareExtension",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "BeforeFilterExtension",
      "label": "BeforeFilterExtension",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "AfterFilterExtension",
      "label": "AfterFilterExtension",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "Parent",
      "label": "Parent",
      "file": "rb-code/sinatra/sinatra-contrib/spec/reloader_spec.rb"
    },
    {
      "id": "respond_app",
      "label": "respond_app",
      "file": "rb-code/sinatra/sinatra-contrib/spec/respond_with_spec.rb"
    },
    {
      "id": "req",
      "label": "req",
      "file": "rb-code/sinatra/sinatra-contrib/spec/respond_with_spec.rb"
    },
    {
      "id": "AsciidoctorTest",
      "label": "AsciidoctorTest",
      "file": "rb-code/sinatra/test/asciidoctor_test.rb"
    },
    {
      "id": "AsciidoctorTest::asciidoc_app",
      "label": "AsciidoctorTest::asciidoc_app",
      "file": "rb-code/sinatra/test/asciidoctor_test.rb"
    },
    {
      "id": "asciidoc_app",
      "label": "asciidoc_app",
      "file": "rb-code/sinatra/test/asciidoctor_test.rb"
    },
    {
      "id": "BaseTest",
      "label": "BaseTest",
      "file": "rb-code/sinatra/test/base_test.rb"
    },
    {
      "id": "TestApp",
      "label": "TestApp",
      "file": "rb-code/sinatra/test/base_test.rb"
    },
    {
      "id": "TestKeywordArgumentInitializerApp",
      "label": "TestKeywordArgumentInitializerApp",
      "file": "rb-code/sinatra/test/base_test.rb"
    },
    {
      "id": "TestKeywordArgumentInitializerApp::initialize",
      "label": "TestKeywordArgumentInitializerApp::initialize",
      "file": "rb-code/sinatra/test/base_test.rb"
    },
    {
      "id": "BaseTest::initialize",
      "label": "BaseTest::initialize",
      "file": "rb-code/sinatra/test/base_test.rb"
    },
    {
      "id": "TestMiddleware",
      "label": "TestMiddleware",
      "file": "rb-code/sinatra/test/base_test.rb"
    },
    {
      "id": "TestMiddleware::route_missing",
      "label": "TestMiddleware::route_missing",
      "file": "rb-code/sinatra/test/base_test.rb"
    },
    {
      "id": "BaseTest::route_missing",
      "label": "BaseTest::route_missing",
      "file": "rb-code/sinatra/test/base_test.rb"
    },
    {
      "id": "TestMiddlewareContentLength",
      "label": "TestMiddlewareContentLength",
      "file": "rb-code/sinatra/test/base_test.rb"
    },
    {
      "id": "BuilderTest",
      "label": "BuilderTest",
      "file": "rb-code/sinatra/test/builder_test.rb"
    },
    {
      "id": "BuilderTest::builder_app",
      "label": "BuilderTest::builder_app",
      "file": "rb-code/sinatra/test/builder_test.rb"
    },
    {
      "id": "builder_app",
      "label": "builder_app",
      "file": "rb-code/sinatra/test/builder_test.rb"
    },
    {
      "id": "CompileTest",
      "label": "CompileTest",
      "file": "rb-code/sinatra/test/compile_test.rb"
    },
    {
      "id": "Test",
      "label": "Test",
      "file": "rb-code/sinatra/test/contest.rb"
    },
    {
      "id": "Test::setup_blocks",
      "label": "Test::setup_blocks",
      "file": "rb-code/sinatra/test/contest.rb"
    },
    {
      "id": "Test::teardown_blocks",
      "label": "Test::teardown_blocks",
      "file": "rb-code/sinatra/test/contest.rb"
    },
    {
      "id": "setup_blocks",
      "label": "setup_blocks",
      "file": "rb-code/sinatra/test/contest.rb"
    },
    {
      "id": "teardown_blocks",
      "label": "teardown_blocks",
      "file": "rb-code/sinatra/test/contest.rb"
    },
    {
      "id": "DelegatorTest",
      "label": "DelegatorTest",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "Mirror",
      "label": "Mirror",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "Mirror::method_missing",
      "label": "Mirror::method_missing",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "DelegatorTest::method_missing",
      "label": "DelegatorTest::method_missing",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "DelegatorTest::teardown",
      "label": "DelegatorTest::teardown",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "DelegatorTest::delegation_app",
      "label": "DelegatorTest::delegation_app",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "DelegatorTest::mirror",
      "label": "DelegatorTest::mirror",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "DelegatorTest::delegate",
      "label": "DelegatorTest::delegate",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "DelegatorTest::target",
      "label": "DelegatorTest::target",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "DelegatorTest::respond_to?",
      "label": "DelegatorTest::respond_to?",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "teardown",
      "label": "teardown",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "delegation_app",
      "label": "delegation_app",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "mirror",
      "label": "mirror",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "delegate",
      "label": "delegate",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "target",
      "label": "target",
      "file": "rb-code/sinatra/test/delegator_test.rb"
    },
    {
      "id": "ERBTest",
      "label": "ERBTest",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "ERBTest::engine",
      "label": "ERBTest::engine",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "ERBTest::setup",
      "label": "ERBTest::setup",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "ERBTest::erb_app",
      "label": "ERBTest::erb_app",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "ERBTest::container",
      "label": "ERBTest::container",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "ERBTest::is",
      "label": "ERBTest::is",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "engine",
      "label": "engine",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "setup",
      "label": "setup",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "erb_app",
      "label": "erb_app",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "container",
      "label": "container",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "is",
      "label": "is",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "ErubiTest",
      "label": "ErubiTest",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "ErubiTest::engine",
      "label": "ErubiTest::engine",
      "file": "rb-code/sinatra/test/erb_test.rb"
    },
    {
      "id": "ExtensionsTest",
      "label": "ExtensionsTest",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "FooExtensions",
      "label": "FooExtensions",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::foo",
      "label": "ExtensionsTest::foo",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::im_hiding_in_ur_foos",
      "label": "ExtensionsTest::im_hiding_in_ur_foos",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "BarExtensions",
      "label": "BarExtensions",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::bar",
      "label": "ExtensionsTest::bar",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "BazExtensions",
      "label": "BazExtensions",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::baz",
      "label": "ExtensionsTest::baz",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "QuuxExtensions",
      "label": "QuuxExtensions",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::quux",
      "label": "ExtensionsTest::quux",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "PainExtensions",
      "label": "PainExtensions",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::foo=",
      "label": "ExtensionsTest::foo=",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::bar?",
      "label": "ExtensionsTest::bar?",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::fizz!",
      "label": "ExtensionsTest::fizz!",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::im_in_ur_anonymous_module",
      "label": "ExtensionsTest::im_in_ur_anonymous_module",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "BizzleExtension",
      "label": "BizzleExtension",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "ExtensionsTest::bizzle",
      "label": "ExtensionsTest::bizzle",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "BizzleApp",
      "label": "BizzleApp",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "im_hiding_in_ur_foos",
      "label": "im_hiding_in_ur_foos",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "bar",
      "label": "bar",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "baz",
      "label": "baz",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "quux",
      "label": "quux",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "foo=",
      "label": "foo=",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "bar?",
      "label": "bar?",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "fizz!",
      "label": "fizz!",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "im_in_ur_anonymous_module",
      "label": "im_in_ur_anonymous_module",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "bizzle",
      "label": "bizzle",
      "file": "rb-code/sinatra/test/extensions_test.rb"
    },
    {
      "id": "BeforeFilterTest",
      "label": "BeforeFilterTest",
      "file": "rb-code/sinatra/test/filter_test.rb"
    },
    {
      "id": "AfterFilterTest",
      "label": "AfterFilterTest",
      "file": "rb-code/sinatra/test/filter_test.rb"
    },
    {
      "id": "HAMLTest",
      "label": "HAMLTest",
      "file": "rb-code/sinatra/test/haml_test.rb"
    },
    {
      "id": "HAMLTest::haml_app",
      "label": "HAMLTest::haml_app",
      "file": "rb-code/sinatra/test/haml_test.rb"
    },
    {
      "id": "haml_app",
      "label": "haml_app",
      "file": "rb-code/sinatra/test/haml_test.rb"
    },
    {
      "id": "HelpersTest",
      "label": "HelpersTest",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::test_default",
      "label": "HelpersTest::test_default",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::status_app",
      "label": "HelpersTest::status_app",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::attachment_app",
      "label": "HelpersTest::attachment_app",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::teardown",
      "label": "HelpersTest::teardown",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::send_file_app",
      "label": "HelpersTest::send_file_app",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelperOne",
      "label": "HelperOne",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::one",
      "label": "HelpersTest::one",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelperTwo",
      "label": "HelperTwo",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::two",
      "label": "HelpersTest::two",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::foo",
      "label": "HelpersTest::foo",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersOverloadingBaseHelper",
      "label": "HelpersOverloadingBaseHelper",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::my_test",
      "label": "HelpersTest::my_test",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersOverloadingIncludeAndOverride",
      "label": "HelpersOverloadingIncludeAndOverride",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersOverloadingIncludeAndOverride::my_test",
      "label": "HelpersOverloadingIncludeAndOverride::my_test",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelperWithIncluded",
      "label": "HelperWithIncluded",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "ClassMethods",
      "label": "ClassMethods",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "HelpersTest::nickname",
      "label": "HelpersTest::nickname",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "ServerApp",
      "label": "ServerApp",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "test_default",
      "label": "test_default",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "status_app",
      "label": "status_app",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "attachment_app",
      "label": "attachment_app",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "send_file_app",
      "label": "send_file_app",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "one",
      "label": "one",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "two",
      "label": "two",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "my_test",
      "label": "my_test",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "nickname",
      "label": "nickname",
      "file": "rb-code/sinatra/test/helpers_test.rb"
    },
    {
      "id": "TestIndifferentHashBasics",
      "label": "TestIndifferentHashBasics",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHashBasics::test_flattened_constructor",
      "label": "TestIndifferentHashBasics::test_flattened_constructor",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHashBasics::test_pairs_constructor",
      "label": "TestIndifferentHashBasics::test_pairs_constructor",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHashBasics::test_default_block",
      "label": "TestIndifferentHashBasics::test_default_block",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHashBasics::test_default_object",
      "label": "TestIndifferentHashBasics::test_default_object",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHashBasics::test_default_assignment",
      "label": "TestIndifferentHashBasics::test_default_assignment",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHashBasics::test_assignment",
      "label": "TestIndifferentHashBasics::test_assignment",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHashBasics::test_merge!",
      "label": "TestIndifferentHashBasics::test_merge!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_flattened_constructor",
      "label": "test_flattened_constructor",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_pairs_constructor",
      "label": "test_pairs_constructor",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_default_block",
      "label": "test_default_block",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_default_object",
      "label": "test_default_object",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_default_assignment",
      "label": "test_default_assignment",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_assignment",
      "label": "test_assignment",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_merge!",
      "label": "test_merge!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash",
      "label": "TestIndifferentHash",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::setup",
      "label": "TestIndifferentHash::setup",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_hash_constructor",
      "label": "TestIndifferentHash::test_hash_constructor",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_assoc",
      "label": "TestIndifferentHash::test_assoc",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_rassoc",
      "label": "TestIndifferentHash::test_rassoc",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_fetch",
      "label": "TestIndifferentHash::test_fetch",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_symbolic_retrieval",
      "label": "TestIndifferentHash::test_symbolic_retrieval",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_key",
      "label": "TestIndifferentHash::test_key",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_key?",
      "label": "TestIndifferentHash::test_key?",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_value?",
      "label": "TestIndifferentHash::test_value?",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_delete",
      "label": "TestIndifferentHash::test_delete",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_dig",
      "label": "TestIndifferentHash::test_dig",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_slice",
      "label": "TestIndifferentHash::test_slice",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_fetch_values",
      "label": "TestIndifferentHash::test_fetch_values",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_values_at",
      "label": "TestIndifferentHash::test_values_at",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_merge",
      "label": "TestIndifferentHash::test_merge",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_merge_with_multiple_argument",
      "label": "TestIndifferentHash::test_merge_with_multiple_argument",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_replace",
      "label": "TestIndifferentHash::test_replace",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_transform_values!",
      "label": "TestIndifferentHash::test_transform_values!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_transform_values",
      "label": "TestIndifferentHash::test_transform_values",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_transform_keys!",
      "label": "TestIndifferentHash::test_transform_keys!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_transform_keys",
      "label": "TestIndifferentHash::test_transform_keys",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_select",
      "label": "TestIndifferentHash::test_select",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_select!",
      "label": "TestIndifferentHash::test_select!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_reject",
      "label": "TestIndifferentHash::test_reject",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_reject!",
      "label": "TestIndifferentHash::test_reject!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_compact",
      "label": "TestIndifferentHash::test_compact",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "TestIndifferentHash::test_except",
      "label": "TestIndifferentHash::test_except",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_hash_constructor",
      "label": "test_hash_constructor",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_assoc",
      "label": "test_assoc",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_rassoc",
      "label": "test_rassoc",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_fetch",
      "label": "test_fetch",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_symbolic_retrieval",
      "label": "test_symbolic_retrieval",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_key",
      "label": "test_key",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_key?",
      "label": "test_key?",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_value?",
      "label": "test_value?",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_delete",
      "label": "test_delete",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_dig",
      "label": "test_dig",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_slice",
      "label": "test_slice",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_fetch_values",
      "label": "test_fetch_values",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_values_at",
      "label": "test_values_at",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_merge",
      "label": "test_merge",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_merge_with_multiple_argument",
      "label": "test_merge_with_multiple_argument",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_replace",
      "label": "test_replace",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_transform_values!",
      "label": "test_transform_values!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_transform_values",
      "label": "test_transform_values",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_transform_keys!",
      "label": "test_transform_keys!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_transform_keys",
      "label": "test_transform_keys",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_select",
      "label": "test_select",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_select!",
      "label": "test_select!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_reject",
      "label": "test_reject",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_reject!",
      "label": "test_reject!",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_compact",
      "label": "test_compact",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "test_except",
      "label": "test_except",
      "file": "rb-code/sinatra/test/indifferent_hash_test.rb"
    },
    {
      "id": "Subclass",
      "label": "Subclass",
      "file": "rb-code/sinatra/test/integration/app.rb"
    },
    {
      "id": "IntegrationAsyncHelper",
      "label": "IntegrationAsyncHelper",
      "file": "rb-code/sinatra/test/integration_async_helper.rb"
    },
    {
      "id": "it",
      "label": "it",
      "file": "rb-code/sinatra/test/integration_async_helper.rb"
    },
    {
      "id": "IntegrationAsyncTest",
      "label": "IntegrationAsyncTest",
      "file": "rb-code/sinatra/test/integration_async_test.rb"
    },
    {
      "id": "IntegrationHelper",
      "label": "IntegrationHelper",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer",
      "label": "BaseServer",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::app_file",
      "label": "BaseServer::app_file",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::environment",
      "label": "BaseServer::environment",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::initialize",
      "label": "BaseServer::initialize",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::run",
      "label": "BaseServer::run",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::installed?",
      "label": "BaseServer::installed?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::command",
      "label": "BaseServer::command",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::webrick?",
      "label": "BaseServer::webrick?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::puma?",
      "label": "BaseServer::puma?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::falcon?",
      "label": "BaseServer::falcon?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::trinidad?",
      "label": "BaseServer::trinidad?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::net_http_server?",
      "label": "BaseServer::net_http_server?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::warnings",
      "label": "BaseServer::warnings",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "BaseServer::run_test",
      "label": "BaseServer::run_test",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "environment",
      "label": "environment",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "installed?",
      "label": "installed?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "webrick?",
      "label": "webrick?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "puma?",
      "label": "puma?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "falcon?",
      "label": "falcon?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "trinidad?",
      "label": "trinidad?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "net_http_server?",
      "label": "net_http_server?",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "warnings",
      "label": "warnings",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "run_test",
      "label": "run_test",
      "file": "rb-code/sinatra/test/integration_helper.rb"
    },
    {
      "id": "IntegrationStartHelper",
      "label": "IntegrationStartHelper",
      "file": "rb-code/sinatra/test/integration_start_helper.rb"
    },
    {
      "id": "command_for",
      "label": "command_for",
      "file": "rb-code/sinatra/test/integration_start_helper.rb"
    },
    {
      "id": "with_process",
      "label": "with_process",
      "file": "rb-code/sinatra/test/integration_start_helper.rb"
    },
    {
      "id": "echo_output",
      "label": "echo_output",
      "file": "rb-code/sinatra/test/integration_start_helper.rb"
    },
    {
      "id": "debug_all?",
      "label": "debug_all?",
      "file": "rb-code/sinatra/test/integration_start_helper.rb"
    },
    {
      "id": "wait_timeout",
      "label": "wait_timeout",
      "file": "rb-code/sinatra/test/integration_start_helper.rb"
    },
    {
      "id": "wait_for_output",
      "label": "wait_for_output",
      "file": "rb-code/sinatra/test/integration_start_helper.rb"
    },
    {
      "id": "IntegrationStartTest",
      "label": "IntegrationStartTest",
      "file": "rb-code/sinatra/test/integration_start_test.rb"
    },
    {
      "id": "IntegrationStartTest::test_app_start_without_rackup",
      "label": "IntegrationStartTest::test_app_start_without_rackup",
      "file": "rb-code/sinatra/test/integration_start_test.rb"
    },
    {
      "id": "IntegrationStartTest::test_classic_app_start",
      "label": "IntegrationStartTest::test_classic_app_start",
      "file": "rb-code/sinatra/test/integration_start_test.rb"
    },
    {
      "id": "IntegrationStartTest::test_classic_app_with_zeitwerk",
      "label": "IntegrationStartTest::test_classic_app_with_zeitwerk",
      "file": "rb-code/sinatra/test/integration_start_test.rb"
    },
    {
      "id": "test_app_start_without_rackup",
      "label": "test_app_start_without_rackup",
      "file": "rb-code/sinatra/test/integration_start_test.rb"
    },
    {
      "id": "test_classic_app_start",
      "label": "test_classic_app_start",
      "file": "rb-code/sinatra/test/integration_start_test.rb"
    },
    {
      "id": "test_classic_app_with_zeitwerk",
      "label": "test_classic_app_with_zeitwerk",
      "file": "rb-code/sinatra/test/integration_start_test.rb"
    },
    {
      "id": "IntegrationTest",
      "label": "IntegrationTest",
      "file": "rb-code/sinatra/test/integration_test.rb"
    },
    {
      "id": "LiquidTest",
      "label": "LiquidTest",
      "file": "rb-code/sinatra/test/liquid_test.rb"
    },
    {
      "id": "LiquidTest::liquid_app",
      "label": "LiquidTest::liquid_app",
      "file": "rb-code/sinatra/test/liquid_test.rb"
    },
    {
      "id": "liquid_app",
      "label": "liquid_app",
      "file": "rb-code/sinatra/test/liquid_test.rb"
    },
    {
      "id": "FooError",
      "label": "FooError",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "FooNotFound",
      "label": "FooNotFound",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "FooSpecialError",
      "label": "FooSpecialError",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "FooSpecialError::http_status",
      "label": "FooSpecialError::http_status",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "FooStatusOutOfRangeError",
      "label": "FooStatusOutOfRangeError",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "FooStatusOutOfRangeError::code",
      "label": "FooStatusOutOfRangeError::code",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "code",
      "label": "code",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "FooWithCode",
      "label": "FooWithCode",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "FooWithCode::code",
      "label": "FooWithCode::code",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "FirstError",
      "label": "FirstError",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "SecondError",
      "label": "SecondError",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "MappedErrorTest",
      "label": "MappedErrorTest",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "MappedErrorTest::test_default",
      "label": "MappedErrorTest::test_default",
      "file": "rb-code/sinatra/test/mapped_error_test.rb"
    },
    {
      "id": "MarkabyTest",
      "label": "MarkabyTest",
      "file": "rb-code/sinatra/test/markaby_test.rb"
    },
    {
      "id": "MarkabyTest::markaby_app",
      "label": "MarkabyTest::markaby_app",
      "file": "rb-code/sinatra/test/markaby_test.rb"
    },
    {
      "id": "markaby_app",
      "label": "markaby_app",
      "file": "rb-code/sinatra/test/markaby_test.rb"
    },
    {
      "id": "markdown_app",
      "label": "markdown_app",
      "file": "rb-code/sinatra/test/markdown_test.rb"
    },
    {
      "id": "MiddlewareTest",
      "label": "MiddlewareTest",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "MockMiddleware",
      "label": "MockMiddleware",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "MockMiddleware::call",
      "label": "MockMiddleware::call",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "MiddlewareTest::call",
      "label": "MiddlewareTest::call",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "UpcaseMiddleware",
      "label": "UpcaseMiddleware",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "UpcaseMiddleware::call",
      "label": "UpcaseMiddleware::call",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "DowncaseMiddleware",
      "label": "DowncaseMiddleware",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "DowncaseMiddleware::call",
      "label": "DowncaseMiddleware::call",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "FreezeMiddleware",
      "label": "FreezeMiddleware",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "FreezeMiddleware::call",
      "label": "FreezeMiddleware::call",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "SpecialConstsMiddleware",
      "label": "SpecialConstsMiddleware",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "SpecialConstsMiddleware::call",
      "label": "SpecialConstsMiddleware::call",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "KeywordArgumentInitializationMiddleware",
      "label": "KeywordArgumentInitializationMiddleware",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "KeywordArgumentInitializationMiddleware::initialize",
      "label": "KeywordArgumentInitializationMiddleware::initialize",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "MiddlewareTest::initialize",
      "label": "MiddlewareTest::initialize",
      "file": "rb-code/sinatra/test/middleware_test.rb"
    },
    {
      "id": "NokogiriTest",
      "label": "NokogiriTest",
      "file": "rb-code/sinatra/test/nokogiri_test.rb"
    },
    {
      "id": "NokogiriTest::nokogiri_app",
      "label": "NokogiriTest::nokogiri_app",
      "file": "rb-code/sinatra/test/nokogiri_test.rb"
    },
    {
      "id": "nokogiri_app",
      "label": "nokogiri_app",
      "file": "rb-code/sinatra/test/nokogiri_test.rb"
    },
    {
      "id": "RablTest",
      "label": "RablTest",
      "file": "rb-code/sinatra/test/rabl_test.rb"
    },
    {
      "id": "RablTest::rabl_app",
      "label": "RablTest::rabl_app",
      "file": "rb-code/sinatra/test/rabl_test.rb"
    },
    {
      "id": "rabl_app",
      "label": "rabl_app",
      "file": "rb-code/sinatra/test/rabl_test.rb"
    },
    {
      "id": "RackTest",
      "label": "RackTest",
      "file": "rb-code/sinatra/test/rack_test.rb"
    },
    {
      "id": "RackTest::build",
      "label": "RackTest::build",
      "file": "rb-code/sinatra/test/rack_test.rb"
    },
    {
      "id": "RackTest::check",
      "label": "RackTest::check",
      "file": "rb-code/sinatra/test/rack_test.rb"
    },
    {
      "id": "check",
      "label": "check",
      "file": "rb-code/sinatra/test/rack_test.rb"
    },
    {
      "id": "RdocTest",
      "label": "RdocTest",
      "file": "rb-code/sinatra/test/rdoc_test.rb"
    },
    {
      "id": "RdocTest::rdoc_app",
      "label": "RdocTest::rdoc_app",
      "file": "rb-code/sinatra/test/rdoc_test.rb"
    },
    {
      "id": "rdoc_app",
      "label": "rdoc_app",
      "file": "rb-code/sinatra/test/rdoc_test.rb"
    },
    {
      "id": "ReadmeTest",
      "label": "ReadmeTest",
      "file": "rb-code/sinatra/test/readme_test.rb"
    },
    {
      "id": "RequestTest",
      "label": "RequestTest",
      "file": "rb-code/sinatra/test/request_test.rb"
    },
    {
      "id": "ResponseTest",
      "label": "ResponseTest",
      "file": "rb-code/sinatra/test/response_test.rb"
    },
    {
      "id": "ResponseTest::assert_same_body",
      "label": "ResponseTest::assert_same_body",
      "file": "rb-code/sinatra/test/response_test.rb"
    },
    {
      "id": "assert_same_body",
      "label": "assert_same_body",
      "file": "rb-code/sinatra/test/response_test.rb"
    },
    {
      "id": "ThirdPartyError",
      "label": "ThirdPartyError",
      "file": "rb-code/sinatra/test/result_test.rb"
    },
    {
      "id": "ThirdPartyError::http_status",
      "label": "ThirdPartyError::http_status",
      "file": "rb-code/sinatra/test/result_test.rb"
    },
    {
      "id": "ResultTest",
      "label": "ResultTest",
      "file": "rb-code/sinatra/test/result_test.rb"
    },
    {
      "id": "RouteAddedTest",
      "label": "RouteAddedTest",
      "file": "rb-code/sinatra/test/route_added_hook_test.rb"
    },
    {
      "id": "RouteAddedHookTest",
      "label": "RouteAddedHookTest",
      "file": "rb-code/sinatra/test/route_added_hook_test.rb"
    },
    {
      "id": "route_def",
      "label": "route_def",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "PatternLookAlike",
      "label": "PatternLookAlike",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "PatternLookAlike::to_pattern",
      "label": "PatternLookAlike::to_pattern",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "PatternLookAlike::params",
      "label": "PatternLookAlike::params",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "to_pattern",
      "label": "to_pattern",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "RoutingTest",
      "label": "RoutingTest",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "RoutingTest::protect",
      "label": "RoutingTest::protect",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "RoutingTest::authorize",
      "label": "RoutingTest::authorize",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "protect",
      "label": "protect",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "authorize",
      "label": "authorize",
      "file": "rb-code/sinatra/test/routing_test.rb"
    },
    {
      "id": "SassTest",
      "label": "SassTest",
      "file": "rb-code/sinatra/test/sass_test.rb"
    },
    {
      "id": "SassTest::sass_app",
      "label": "SassTest::sass_app",
      "file": "rb-code/sinatra/test/sass_test.rb"
    },
    {
      "id": "sass_app",
      "label": "sass_app",
      "file": "rb-code/sinatra/test/sass_test.rb"
    },
    {
      "id": "ScssTest",
      "label": "ScssTest",
      "file": "rb-code/sinatra/test/scss_test.rb"
    },
    {
      "id": "ScssTest::scss_app",
      "label": "ScssTest::scss_app",
      "file": "rb-code/sinatra/test/scss_test.rb"
    },
    {
      "id": "scss_app",
      "label": "scss_app",
      "file": "rb-code/sinatra/test/scss_test.rb"
    },
    {
      "id": "Handler",
      "label": "Handler",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "Mock",
      "label": "Mock",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "Mock::stop",
      "label": "Mock::stop",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "stop",
      "label": "stop",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "ServerTest",
      "label": "ServerTest",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "ServerTest::teardown",
      "label": "ServerTest::teardown",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "MyMiddleware",
      "label": "MyMiddleware",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "MyMiddleware::initialize",
      "label": "MyMiddleware::initialize",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "MyMiddleware::call",
      "label": "MyMiddleware::call",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "ServerTest::initialize",
      "label": "ServerTest::initialize",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "ServerTest::call",
      "label": "ServerTest::call",
      "file": "rb-code/sinatra/test/server_test.rb"
    },
    {
      "id": "SettingsTest",
      "label": "SettingsTest",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "SettingsTest::foo",
      "label": "SettingsTest::foo",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "SettingsTest::foo=",
      "label": "SettingsTest::foo=",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "SettingsTest::priv",
      "label": "SettingsTest::priv",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "SettingsTest::pub",
      "label": "SettingsTest::pub",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "MiddlewareTracker",
      "label": "MiddlewareTracker",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "MiddlewareTracker::use",
      "label": "MiddlewareTracker::use",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "SettingsTest::use",
      "label": "SettingsTest::use",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "priv",
      "label": "priv",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "pub",
      "label": "pub",
      "file": "rb-code/sinatra/test/settings_test.rb"
    },
    {
      "id": "SinatraTest",
      "label": "SinatraTest",
      "file": "rb-code/sinatra/test/sinatra_test.rb"
    },
    {
      "id": "SlimTest",
      "label": "SlimTest",
      "file": "rb-code/sinatra/test/slim_test.rb"
    },
    {
      "id": "SlimTest::slim_app",
      "label": "SlimTest::slim_app",
      "file": "rb-code/sinatra/test/slim_test.rb"
    },
    {
      "id": "slim_app",
      "label": "slim_app",
      "file": "rb-code/sinatra/test/slim_test.rb"
    },
    {
      "id": "StaticTest",
      "label": "StaticTest",
      "file": "rb-code/sinatra/test/static_test.rb"
    },
    {
      "id": "StaticTest::assert_valid_range",
      "label": "StaticTest::assert_valid_range",
      "file": "rb-code/sinatra/test/static_test.rb"
    },
    {
      "id": "assert_valid_range",
      "label": "assert_valid_range",
      "file": "rb-code/sinatra/test/static_test.rb"
    },
    {
      "id": "StreamingTest",
      "label": "StreamingTest",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "MockScheduler",
      "label": "MockScheduler",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "MockScheduler::initialize",
      "label": "MockScheduler::initialize",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "MockScheduler::schedule",
      "label": "MockScheduler::schedule",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "MockScheduler::defer",
      "label": "MockScheduler::defer",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "MockScheduler::schedule!",
      "label": "MockScheduler::schedule!",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "MockScheduler::defer!",
      "label": "MockScheduler::defer!",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "StreamingTest::initialize",
      "label": "StreamingTest::initialize",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "StreamingTest::schedule",
      "label": "StreamingTest::schedule",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "StreamingTest::defer",
      "label": "StreamingTest::defer",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "StreamingTest::schedule!",
      "label": "StreamingTest::schedule!",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "StreamingTest::defer!",
      "label": "StreamingTest::defer!",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "schedule",
      "label": "schedule",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "defer",
      "label": "defer",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "schedule!",
      "label": "schedule!",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "defer!",
      "label": "defer!",
      "file": "rb-code/sinatra/test/streaming_test.rb"
    },
    {
      "id": "TestTemplate",
      "label": "TestTemplate",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "TestTemplate::prepare",
      "label": "TestTemplate::prepare",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "TestTemplate::evaluate",
      "label": "TestTemplate::evaluate",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "prepare",
      "label": "prepare",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "evaluate",
      "label": "evaluate",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "TemplatesTest",
      "label": "TemplatesTest",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "TemplatesTest::render_app",
      "label": "TemplatesTest::render_app",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "TemplatesTest::with_default_layout",
      "label": "TemplatesTest::with_default_layout",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "TemplatesTest::find_template",
      "label": "TemplatesTest::find_template",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "render_app",
      "label": "render_app",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "with_default_layout",
      "label": "with_default_layout",
      "file": "rb-code/sinatra/test/templates_test.rb"
    },
    {
      "id": "Base::assertions",
      "label": "Base::assertions",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "assertions",
      "label": "assertions",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Builder::include?",
      "label": "Builder::include?",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "include?",
      "label": "include?",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::mock_app",
      "label": "Test::mock_app",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::app",
      "label": "Test::app",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::body",
      "label": "Test::body",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::assert_body",
      "label": "Test::assert_body",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::assert_status",
      "label": "Test::assert_status",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::assert_like",
      "label": "Test::assert_like",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::assert_include",
      "label": "Test::assert_include",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::options",
      "label": "Test::options",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::patch",
      "label": "Test::patch",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::link",
      "label": "Test::link",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::unlink",
      "label": "Test::unlink",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::method_missing",
      "label": "Test::method_missing",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "Test::silence_warnings",
      "label": "Test::silence_warnings",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "assert_body",
      "label": "assert_body",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "assert_status",
      "label": "assert_status",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "assert_like",
      "label": "assert_like",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "assert_include",
      "label": "assert_include",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "silence_warnings",
      "label": "silence_warnings",
      "file": "rb-code/sinatra/test/test_helper.rb"
    },
    {
      "id": "YajlTest",
      "label": "YajlTest",
      "file": "rb-code/sinatra/test/yajl_test.rb"
    },
    {
      "id": "YajlTest::yajl_app",
      "label": "YajlTest::yajl_app",
      "file": "rb-code/sinatra/test/yajl_test.rb"
    },
    {
      "id": "yajl_app",
      "label": "yajl_app",
      "file": "rb-code/sinatra/test/yajl_test.rb"
    }
  ],
  "edges": [
    {
      "from": "Request",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "Request::accept",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Request::accept",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Request::accept",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "Request::accept",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Request::accept",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "Request::accept",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "Request::accept",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "Request::accept",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Request::accept?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Request::accept?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Request::accept?",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "Request::preferred_type",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Request::preferred_type",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Request::preferred_type",
      "to": "accept",
      "relationship": "calls"
    },
    {
      "from": "Request::preferred_type",
      "to": "flatten!",
      "relationship": "calls"
    },
    {
      "from": "Request::preferred_type",
      "to": "detect",
      "relationship": "calls"
    },
    {
      "from": "Request::preferred_type",
      "to": "accepts?",
      "relationship": "calls"
    },
    {
      "from": "Request::preferred_type",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "accept",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "flatten!",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "detect",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "accepts?",
      "relationship": "calls"
    },
    {
      "from": "Request::forwarded?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Request::safe?",
      "to": "get?",
      "relationship": "calls"
    },
    {
      "from": "Request::safe?",
      "to": "head?",
      "relationship": "calls"
    },
    {
      "from": "Request::safe?",
      "to": "options?",
      "relationship": "calls"
    },
    {
      "from": "Request::safe?",
      "to": "trace?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "get?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "head?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "options?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "trace?",
      "relationship": "calls"
    },
    {
      "from": "Request::idempotent?",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "Request::idempotent?",
      "to": "put?",
      "relationship": "calls"
    },
    {
      "from": "Request::idempotent?",
      "to": "delete?",
      "relationship": "calls"
    },
    {
      "from": "Request::idempotent?",
      "to": "link?",
      "relationship": "calls"
    },
    {
      "from": "Request::idempotent?",
      "to": "unlink?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "put?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "delete?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "link?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "unlink?",
      "relationship": "calls"
    },
    {
      "from": "Request::link?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Request::link?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "Request::unlink?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Request::unlink?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "Request::params",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Request::params",
      "to": "escape_html",
      "relationship": "calls"
    },
    {
      "from": "Request::params",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "escape_html",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "attr_accessor",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "attr_reader",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "to_h",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::initialize",
      "to": "to_f",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "to_h",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "to_f",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::<=>",
      "to": "<=>",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::<=>",
      "to": "priority",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "<=>",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "priority",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::priority",
      "to": "-@",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::priority",
      "to": "count",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::priority",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "-@",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "count",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::to_s",
      "to": "entry",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::to_s",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "entry",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::respond_to?",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::respond_to?",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::method_missing",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry::method_missing",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "AcceptEntry",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "attr_accessor",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "attr_reader",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "to_h",
      "relationship": "calls"
    },
    {
      "from": "Request::initialize",
      "to": "to_f",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "to_h",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "to_f",
      "relationship": "calls"
    },
    {
      "from": "Request::<=>",
      "to": "<=>",
      "relationship": "calls"
    },
    {
      "from": "Request::<=>",
      "to": "priority",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "<=>",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "priority",
      "relationship": "calls"
    },
    {
      "from": "Request::priority",
      "to": "-@",
      "relationship": "calls"
    },
    {
      "from": "Request::priority",
      "to": "count",
      "relationship": "calls"
    },
    {
      "from": "Request::priority",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "-@",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "count",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "Request::to_s",
      "to": "entry",
      "relationship": "calls"
    },
    {
      "from": "Request::to_s",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "entry",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "Request::respond_to?",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Request::respond_to?",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Request::method_missing",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "Request::method_missing",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "attr_reader",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::initialize",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::initialize",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::initialize",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::initialize",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::initialize",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::initialize",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::initialize",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::initialize",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::initialize",
      "to": "to_h",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "to_h",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::accepts?",
      "to": "fnmatch",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::accepts?",
      "to": "matches_params?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::accepts?",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "fnmatch",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "matches_params?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::matches_params?",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::matches_params?",
      "to": "all?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::matches_params?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::matches_params?",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::matches_params?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry::matches_params?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "all?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "MimeTypeEntry",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Request::accepts?",
      "to": "fnmatch",
      "relationship": "calls"
    },
    {
      "from": "Request::accepts?",
      "to": "matches_params?",
      "relationship": "calls"
    },
    {
      "from": "Request::accepts?",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "fnmatch",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "matches_params?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "Request::matches_params?",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Request::matches_params?",
      "to": "all?",
      "relationship": "calls"
    },
    {
      "from": "Request::matches_params?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Request::matches_params?",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "Request::matches_params?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Request::matches_params?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "all?",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Request",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "accept",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "accept",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "accept",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "accept",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "accept",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "accept",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "accept",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "accept",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "accept?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "accept?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "accept?",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "preferred_type",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "preferred_type",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "preferred_type",
      "to": "accept",
      "relationship": "calls"
    },
    {
      "from": "preferred_type",
      "to": "flatten!",
      "relationship": "calls"
    },
    {
      "from": "preferred_type",
      "to": "detect",
      "relationship": "calls"
    },
    {
      "from": "preferred_type",
      "to": "accepts?",
      "relationship": "calls"
    },
    {
      "from": "preferred_type",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "forwarded?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "safe?",
      "to": "get?",
      "relationship": "calls"
    },
    {
      "from": "safe?",
      "to": "head?",
      "relationship": "calls"
    },
    {
      "from": "safe?",
      "to": "options?",
      "relationship": "calls"
    },
    {
      "from": "safe?",
      "to": "trace?",
      "relationship": "calls"
    },
    {
      "from": "idempotent?",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "idempotent?",
      "to": "put?",
      "relationship": "calls"
    },
    {
      "from": "idempotent?",
      "to": "delete?",
      "relationship": "calls"
    },
    {
      "from": "idempotent?",
      "to": "link?",
      "relationship": "calls"
    },
    {
      "from": "idempotent?",
      "to": "unlink?",
      "relationship": "calls"
    },
    {
      "from": "link?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "link?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "unlink?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "unlink?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "params",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "params",
      "to": "escape_html",
      "relationship": "calls"
    },
    {
      "from": "params",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "to_h",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "to_f",
      "relationship": "calls"
    },
    {
      "from": "<=>",
      "to": "<=>",
      "relationship": "calls"
    },
    {
      "from": "<=>",
      "to": "priority",
      "relationship": "calls"
    },
    {
      "from": "priority",
      "to": "-@",
      "relationship": "calls"
    },
    {
      "from": "priority",
      "to": "count",
      "relationship": "calls"
    },
    {
      "from": "priority",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "to_s",
      "to": "entry",
      "relationship": "calls"
    },
    {
      "from": "to_s",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "respond_to?",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "respond_to?",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "fnmatch",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "matches_params?",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "matches_params?",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "matches_params?",
      "to": "all?",
      "relationship": "calls"
    },
    {
      "from": "matches_params?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "matches_params?",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "matches_params?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "matches_params?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "Response::body=",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Response::body=",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Response::body=",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "Response::each",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Response::each",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "drop_content_info?",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "drop_body?",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "calculate_content_length?",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "reduce",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "Response::finish",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "drop_content_info?",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "drop_body?",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "calculate_content_length?",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "reduce",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "Response::calculate_content_length?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Response::calculate_content_length?",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "Response::calculate_content_length?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Response::calculate_content_length?",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Response::calculate_content_length?",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Response::drop_content_info?",
      "to": "informational?",
      "relationship": "calls"
    },
    {
      "from": "Response::drop_content_info?",
      "to": "drop_body?",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "informational?",
      "relationship": "calls"
    },
    {
      "from": "Response::drop_body?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Response::drop_body?",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "Response",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "body=",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "body=",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "body=",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "drop_content_info?",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "drop_body?",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "calculate_content_length?",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "reduce",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "calculate_content_length?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "calculate_content_length?",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "calculate_content_length?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "calculate_content_length?",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "calculate_content_length?",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "drop_content_info?",
      "to": "informational?",
      "relationship": "calls"
    },
    {
      "from": "drop_content_info?",
      "to": "drop_body?",
      "relationship": "calls"
    },
    {
      "from": "drop_body?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "drop_body?",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::call",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::call",
      "to": "async?",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::call",
      "to": "after_response",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::call",
      "to": "setup_close",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::call",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "async?",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "after_response",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "setup_close",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::setup_close",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::setup_close",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::setup_close",
      "to": "callback",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::setup_close",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::setup_close",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::setup_close",
      "to": "errback",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "callback",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "errback",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::after_response",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::after_response",
      "to": "next_tick",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "next_tick",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::async?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack::async?",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "ExtendedRack",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "async?",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "after_response",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "setup_close",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "setup_close",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "setup_close",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "setup_close",
      "to": "callback",
      "relationship": "calls"
    },
    {
      "from": "setup_close",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "setup_close",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "setup_close",
      "to": "errback",
      "relationship": "calls"
    },
    {
      "from": "after_response",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "after_response",
      "to": "next_tick",
      "relationship": "calls"
    },
    {
      "from": "async?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "async?",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger",
      "to": "method_defined?",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger",
      "to": "alias_method",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger::call",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger::call",
      "to": "call_without_check",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "CommonLogger",
      "to": "call_without_check",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "call_without_check",
      "relationship": "calls"
    },
    {
      "from": "status",
      "to": "status=",
      "relationship": "calls"
    },
    {
      "from": "status",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "status",
      "to": "status_code",
      "relationship": "calls"
    },
    {
      "from": "status",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "body=",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "head?",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "uri",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "absolute_redirects?",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "prefixed_redirects?",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "secure?",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "forwarded?",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "host_with_port",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "script_name",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "path_info",
      "relationship": "calls"
    },
    {
      "from": "uri",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "body=",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "not_found",
      "to": "error",
      "relationship": "calls"
    },
    {
      "from": "headers",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "headers",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "headers",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "logger",
      "to": "logger",
      "relationship": "calls"
    },
    {
      "from": "logger",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "mime_type",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "format",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "all?",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "add_charset",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "default_encoding",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "content_type",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "format",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "basename",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "extname",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "attachment",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "extname",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "attachment",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "last_modified",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "dirname",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "serving",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "Integer",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "send_file",
      "to": "not_found",
      "relationship": "calls"
    },
    {
      "from": "Stream::initialize",
      "to": "to_proc",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "to_proc",
      "relationship": "calls"
    },
    {
      "from": "Stream::close",
      "to": "closed?",
      "relationship": "calls"
    },
    {
      "from": "Stream::close",
      "to": "schedule",
      "relationship": "calls"
    },
    {
      "from": "Stream::close",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Stream::close",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "closed?",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "schedule",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Stream::each",
      "to": "defer",
      "relationship": "calls"
    },
    {
      "from": "Stream::each",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Stream::each",
      "to": "schedule",
      "relationship": "calls"
    },
    {
      "from": "Stream::each",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Stream::each",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "defer",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "Stream::<<",
      "to": "schedule",
      "relationship": "calls"
    },
    {
      "from": "Stream::<<",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Stream::<<",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Stream::callback",
      "to": "closed?",
      "relationship": "calls"
    },
    {
      "from": "Stream::callback",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Stream",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "to_proc",
      "relationship": "calls"
    },
    {
      "from": "close",
      "to": "closed?",
      "relationship": "calls"
    },
    {
      "from": "close",
      "to": "schedule",
      "relationship": "calls"
    },
    {
      "from": "close",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "close",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "defer",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "schedule",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "<<",
      "to": "schedule",
      "relationship": "calls"
    },
    {
      "from": "<<",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "<<",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "callback",
      "to": "closed?",
      "relationship": "calls"
    },
    {
      "from": "callback",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "closed?",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "with_params",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "reject!",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "tr",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "to_i",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "cache_control",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "to_i",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "time_for",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "cache_control",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "expires",
      "to": "httpdate",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "time_for",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "httpdate",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "to_i",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": ">=",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "success?",
      "relationship": "calls"
    },
    {
      "from": "last_modified",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "post?",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "format",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "success?",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "etag_matches?",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "etag",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "back",
      "to": "referer",
      "relationship": "calls"
    },
    {
      "from": "back",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "informational?",
      "to": "between?",
      "relationship": "calls"
    },
    {
      "from": "informational?",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "success?",
      "to": "between?",
      "relationship": "calls"
    },
    {
      "from": "success?",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "redirect?",
      "to": "between?",
      "relationship": "calls"
    },
    {
      "from": "redirect?",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "client_error?",
      "to": "between?",
      "relationship": "calls"
    },
    {
      "from": "client_error?",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "server_error?",
      "to": "between?",
      "relationship": "calls"
    },
    {
      "from": "server_error?",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "not_found?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "not_found?",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "bad_request?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "bad_request?",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "time_for",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "time_for",
      "to": "at",
      "relationship": "calls"
    },
    {
      "from": "time_for",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "time_for",
      "to": "parse",
      "relationship": "calls"
    },
    {
      "from": "time_for",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "time_for",
      "to": "to_time",
      "relationship": "calls"
    },
    {
      "from": "time_for",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "time_for",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "etag_matches?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "etag_matches?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "etag_matches?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "etag_matches?",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "etag_matches?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "etag_matches?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "etag_matches?",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "erb",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "haml",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "sass",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "sass",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "scss",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "scss",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "builder",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "builder",
      "to": "render_ruby",
      "relationship": "calls"
    },
    {
      "from": "liquid",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "markdown",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "markdown",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "rdoc",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "asciidoc",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "markaby",
      "to": "render_ruby",
      "relationship": "calls"
    },
    {
      "from": "nokogiri",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "nokogiri",
      "to": "render_ruby",
      "relationship": "calls"
    },
    {
      "from": "slim",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "yajl",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "yajl",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "rabl",
      "to": "register!",
      "relationship": "calls"
    },
    {
      "from": "rabl",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "find_template",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "find_template",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "find_template",
      "to": "extensions_for",
      "relationship": "calls"
    },
    {
      "from": "find_template",
      "to": "default_mapping",
      "relationship": "calls"
    },
    {
      "from": "find_template",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "render_ruby",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "render_ruby",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "render_ruby",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "render_ruby",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "views",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "default_encoding",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "compile_template",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "catch",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "content_type=",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "template_cache",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "templates",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "to_i",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "find_template",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "exist?",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "compile_block_template",
      "relationship": "calls"
    },
    {
      "from": "compile_template",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "compile_block_template",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "compile_block_template",
      "to": "caller_locations",
      "relationship": "calls"
    },
    {
      "from": "compile_block_template",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "compile_block_template",
      "to": "lineno",
      "relationship": "calls"
    },
    {
      "from": "compile_block_template",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "compile_block_template",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "compile_block_template",
      "to": "to_i",
      "relationship": "calls"
    },
    {
      "from": "TemplateCache::fetch",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "TemplateCache::fetch",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "TemplateCache",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "TemplateCache",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "fetch",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "fetch",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "include",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "attr_accessor",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "attr_reader",
      "relationship": "calls"
    },
    {
      "from": "Base::initialize",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::initialize",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Base::call",
      "to": "call!",
      "relationship": "calls"
    },
    {
      "from": "Base::call",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "call!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "reload_templates",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "clear",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "template_cache",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "invoke",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "dispatch!",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "error_block!",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "default_content_type",
      "relationship": "calls"
    },
    {
      "from": "Base::call!",
      "to": "finish",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "reload_templates",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "clear",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "template_cache",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "invoke",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "dispatch!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "error_block!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "default_content_type",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "finish",
      "relationship": "calls"
    },
    {
      "from": "Base::settings",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::settings",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base::halt",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::halt",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "Base::halt",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Base::halt",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "Base::pass",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "Base::forward",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::forward",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Base::forward",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Base::forward",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "Base::forward",
      "to": "status=",
      "relationship": "calls"
    },
    {
      "from": "Base::forward",
      "to": "body=",
      "relationship": "calls"
    },
    {
      "from": "Base::forward",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "Base::forward",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "status=",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "body=",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "Base::filter!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::filter!",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Base::filter!",
      "to": "filter!",
      "relationship": "calls"
    },
    {
      "from": "Base::filter!",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::filter!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::filter!",
      "to": "filters",
      "relationship": "calls"
    },
    {
      "from": "Base::filter!",
      "to": "process_route",
      "relationship": "calls"
    },
    {
      "from": "Base::filter!",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Base::filter!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "filter!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "filters",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "process_route",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "routes",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "delete_header",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "process_route",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "route_eval",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "route!",
      "relationship": "calls"
    },
    {
      "from": "Base::route!",
      "to": "route_missing",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "routes",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "delete_header",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "route_eval",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "route!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "route_missing",
      "relationship": "calls"
    },
    {
      "from": "Base::route_eval",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "path_info",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "empty_path_info?",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "strict_paths?",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "end_with?",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "force_encoding",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "patterns",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "captures",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "match",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "flatten",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "catch",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "bind",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "Base::process_route",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "path_info",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "empty_path_info?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "strict_paths?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "end_with?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "force_encoding",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "patterns",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "captures",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "match",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "flatten",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "catch",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "bind",
      "relationship": "calls"
    },
    {
      "from": "Base::route_missing",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Base::route_missing",
      "to": "forward",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "forward",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "public_folder",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "path_info",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "valid_path?",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "file?",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "static_cache_control?",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "cache_control",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "static_cache_control",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "send_file",
      "relationship": "calls"
    },
    {
      "from": "Base::static!",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "public_folder",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "valid_path?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "file?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "static_cache_control?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "cache_control",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "static_cache_control",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "send_file",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "catch",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "shift",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "shift",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "frozen?",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "force_encoding",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "invoke",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "static?",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "get?",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "head?",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "static!",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "filter!",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "route!",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "handle_exception!",
      "relationship": "calls"
    },
    {
      "from": "Base::dispatch!",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "frozen?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "static?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "get?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "head?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "static!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "handle_exception!",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "http_status",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "use_code?",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "code",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "server_error?",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "dump_errors?",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "dump_errors!",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "show_exceptions?",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "show_exceptions",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "not_found?",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "x_cascade?",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "error_block!",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "bad_request?",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "escape_html",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "Base::handle_exception!",
      "to": "raise_errors?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "http_status",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "use_code?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "code",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "server_error?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "dump_errors?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "dump_errors!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "show_exceptions?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "show_exceptions",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "not_found?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "x_cascade?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "bad_request?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "escape_html",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "raise_errors?",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "errors",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "reverse_each",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "process_route",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "Base::error_block!",
      "to": "error_block!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "errors",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "reverse_each",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "detailed_message",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "quote",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "lines",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "strftime",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "backtrace",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "puts",
      "relationship": "calls"
    },
    {
      "from": "Base::dump_errors!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "detailed_message",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "quote",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "lines",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "strftime",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "backtrace",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "puts",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "Base::reset!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::reset!",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Base::reset!",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::reset!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::reset!",
      "to": "templates",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "templates",
      "relationship": "calls"
    },
    {
      "from": "Base::extensions",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::extensions",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Base::extensions",
      "to": "uniq",
      "relationship": "calls"
    },
    {
      "from": "Base::extensions",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "Base::extensions",
      "to": "extensions",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "uniq",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "extensions",
      "relationship": "calls"
    },
    {
      "from": "Base::middleware",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::middleware",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Base::middleware",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "Base::middleware",
      "to": "middleware",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "middleware",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "__send__",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "define_singleton",
      "relationship": "calls"
    },
    {
      "from": "Base::set",
      "to": "method_defined?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "__send__",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "define_singleton",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "method_defined?",
      "relationship": "calls"
    },
    {
      "from": "Base::enable",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::enable",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base::disable",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::disable",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base::error",
      "to": "compile!",
      "relationship": "calls"
    },
    {
      "from": "Base::error",
      "to": "flat_map",
      "relationship": "calls"
    },
    {
      "from": "Base::error",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "Base::error",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Base::error",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Base::error",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Base::error",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::error",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "compile!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "flat_map",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Base::not_found",
      "to": "error",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "error",
      "relationship": "calls"
    },
    {
      "from": "Base::template",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Base::template",
      "to": "caller_locations",
      "relationship": "calls"
    },
    {
      "from": "Base::template",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::template",
      "to": "templates",
      "relationship": "calls"
    },
    {
      "from": "Base::template",
      "to": "to_i",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "caller_locations",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "to_i",
      "relationship": "calls"
    },
    {
      "from": "Base::layout",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "binread",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "default_encoding",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "count",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "force_encoding",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "each_line",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "templates",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "Base::inline_templates=",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "binread",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "default_encoding",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "count",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "each_line",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "Base::mime_type",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base::mime_type",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Base::mime_type",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Base::mime_type",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::mime_type",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::mime_type",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "Base::mime_type",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "Base::mime_types",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "Base::mime_types",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "Base::before",
      "to": "add_filter",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "add_filter",
      "relationship": "calls"
    },
    {
      "from": "Base::after",
      "to": "add_filter",
      "relationship": "calls"
    },
    {
      "from": "Base::add_filter",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Base::add_filter",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::add_filter",
      "to": "filters",
      "relationship": "calls"
    },
    {
      "from": "Base::add_filter",
      "to": "compile!",
      "relationship": "calls"
    },
    {
      "from": "Base::condition",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Base::condition",
      "to": "generate_method",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "caller",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "generate_method",
      "relationship": "calls"
    },
    {
      "from": "Base::public=",
      "to": "warn_for_deprecation",
      "relationship": "calls"
    },
    {
      "from": "Base::public=",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "warn_for_deprecation",
      "relationship": "calls"
    },
    {
      "from": "Base::public_dir=",
      "to": "public_folder=",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "public_folder=",
      "relationship": "calls"
    },
    {
      "from": "Base::public_dir",
      "to": "public_folder",
      "relationship": "calls"
    },
    {
      "from": "Base::get",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "Base::get",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base::put",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base::post",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base::delete",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base::head",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base::options",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base::patch",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base::link",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base::unlink",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "Base::helpers",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Base::helpers",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "Base::helpers",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Base::helpers",
      "to": "include",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "Base::register",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Base::register",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Base::register",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::register",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::register",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "Base::register",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::register",
      "to": "registered",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "registered",
      "relationship": "calls"
    },
    {
      "from": "Base::development?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::development?",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "Base::production?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::production?",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "Base::test?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::test?",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "Base::configure",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Base::configure",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Base::configure",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "Base::configure",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "Base::use",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "ruby2_keywords",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "running?",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "running_server",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "stop!",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "stop",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "suppress_messages?",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "on_stop_callback",
      "relationship": "calls"
    },
    {
      "from": "Base::quit!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "running?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "running_server",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "stop!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "stop",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "suppress_messages?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "on_stop_callback",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "exit",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "running?",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "pick",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "server_settings",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "bind",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "start_server",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Base::run!",
      "to": "quit!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "exit",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "pick",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "server_settings",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "start_server",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "quit!",
      "relationship": "calls"
    },
    {
      "from": "Base::running?",
      "to": "running_server?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "running_server?",
      "relationship": "calls"
    },
    {
      "from": "Base::prototype",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::new",
      "to": "new!",
      "relationship": "calls"
    },
    {
      "from": "Base::new",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::new",
      "to": "to_app",
      "relationship": "calls"
    },
    {
      "from": "Base::new",
      "to": "build",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "new!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "to_app",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "build",
      "relationship": "calls"
    },
    {
      "from": "Base::build",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::build",
      "to": "setup_default_middleware",
      "relationship": "calls"
    },
    {
      "from": "Base::build",
      "to": "setup_middleware",
      "relationship": "calls"
    },
    {
      "from": "Base::build",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "setup_default_middleware",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "setup_middleware",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "Base::call",
      "to": "synchronize",
      "relationship": "calls"
    },
    {
      "from": "Base::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Base::call",
      "to": "prototype",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "synchronize",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "prototype",
      "relationship": "calls"
    },
    {
      "from": "Base::caller_files",
      "to": "flatten",
      "relationship": "calls"
    },
    {
      "from": "Base::caller_files",
      "to": "cleaned_caller",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "cleaned_caller",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "prototype",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "suppress_messages?",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "setup_traps",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "threaded=",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "threaded",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "on_start_callback",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Base::start_server",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "setup_traps",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "threaded=",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "threaded",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "on_start_callback",
      "relationship": "calls"
    },
    {
      "from": "Base::suppress_messages?",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "Base::suppress_messages?",
      "to": "handler_name",
      "relationship": "calls"
    },
    {
      "from": "Base::suppress_messages?",
      "to": "quiet",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "handler_name",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "quiet",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_traps",
      "to": "traps?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_traps",
      "to": "at_exit",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_traps",
      "to": "quit!",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_traps",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_traps",
      "to": "trap",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_traps",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_traps",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_traps",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "traps?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "at_exit",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "trap",
      "relationship": "calls"
    },
    {
      "from": "Base::define_singleton",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "Base::define_singleton",
      "to": "singleton_class",
      "relationship": "calls"
    },
    {
      "from": "Base::define_singleton",
      "to": "method_defined?",
      "relationship": "calls"
    },
    {
      "from": "Base::define_singleton",
      "to": "undef_method",
      "relationship": "calls"
    },
    {
      "from": "Base::define_singleton",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Base::define_singleton",
      "to": "define_method",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "singleton_class",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "undef_method",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "define_method",
      "relationship": "calls"
    },
    {
      "from": "Base::host_name",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "Base::host_name",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Base::host_name",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "Base::host_name",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "Base::user_agent",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "Base::user_agent",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "Base::user_agent",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Base::user_agent",
      "to": "user_agent",
      "relationship": "calls"
    },
    {
      "from": "Base::user_agent",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Base::user_agent",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::user_agent",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "user_agent",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "mime_types",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "flatten!",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "Base::provides",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "mime_types",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "flatten!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "Base::route",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::route",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Base::route",
      "to": "empty_path_info",
      "relationship": "calls"
    },
    {
      "from": "Base::route",
      "to": "enable",
      "relationship": "calls"
    },
    {
      "from": "Base::route",
      "to": "compile!",
      "relationship": "calls"
    },
    {
      "from": "Base::route",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Base::route",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::route",
      "to": "invoke_hook",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "empty_path_info",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "enable",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "invoke_hook",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke_hook",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke_hook",
      "to": "extensions",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke_hook",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::invoke_hook",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "Base::generate_method",
      "to": "define_method",
      "relationship": "calls"
    },
    {
      "from": "Base::generate_method",
      "to": "instance_method",
      "relationship": "calls"
    },
    {
      "from": "Base::generate_method",
      "to": "remove_method",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "instance_method",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "remove_method",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "host_name",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "each_pair",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "compile",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "generate_method",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "zero?",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "arity",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Base::compile!",
      "to": "bind",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "host_name",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "each_pair",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "compile",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "zero?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "arity",
      "relationship": "calls"
    },
    {
      "from": "Base::compile",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::compile",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Base::compile",
      "to": "mustermann_opts",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "mustermann_opts",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_default_middleware",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_default_middleware",
      "to": "show_exceptions?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_default_middleware",
      "to": "method_override?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_default_middleware",
      "to": "setup_logging",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_default_middleware",
      "to": "setup_sessions",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_default_middleware",
      "to": "setup_protection",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "method_override?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "setup_logging",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "setup_sessions",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "setup_protection",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_middleware",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_middleware",
      "to": "middleware",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_middleware",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_logging",
      "to": "logging?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_logging",
      "to": "setup_common_logger",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_logging",
      "to": "setup_custom_logger",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_logging",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_logging",
      "to": "logging",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_logging",
      "to": "setup_null_logger",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "logging?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "setup_common_logger",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "setup_custom_logger",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "logging",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "setup_null_logger",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_null_logger",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_common_logger",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_custom_logger",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_custom_logger",
      "to": "logging",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_custom_logger",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "protection?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "protection",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "sessions?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_protection",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "protection?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "protection",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "sessions?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "sessions?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "session_secret?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "session_secret",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "sessions",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "Base::setup_sessions",
      "to": "session_store",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "session_secret?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "session_secret",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "sessions",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "session_store",
      "relationship": "calls"
    },
    {
      "from": "Base::inherited",
      "to": "reset!",
      "relationship": "calls"
    },
    {
      "from": "Base::inherited",
      "to": "app_file?",
      "relationship": "calls"
    },
    {
      "from": "Base::inherited",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Base::inherited",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Base::inherited",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "reset!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "app_file?",
      "relationship": "calls"
    },
    {
      "from": "Base::synchronize",
      "to": "lock?",
      "relationship": "calls"
    },
    {
      "from": "Base::synchronize",
      "to": "synchronize",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "lock?",
      "relationship": "calls"
    },
    {
      "from": "Base::warn_for_deprecation",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Base::warn_for_deprecation",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "Base::warn_for_deprecation",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "Base::warn_for_deprecation",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Base::warn_for_deprecation",
      "to": "cleaned_caller",
      "relationship": "calls"
    },
    {
      "from": "Base::cleaned_caller",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "Base::cleaned_caller",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "Base::cleaned_caller",
      "to": "caller",
      "relationship": "calls"
    },
    {
      "from": "Base::cleaned_caller",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::cleaned_caller",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Base::cleaned_caller",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Base::cleaned_caller",
      "to": "callers_to_ignore",
      "relationship": "calls"
    },
    {
      "from": "Base::cleaned_caller",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "callers_to_ignore",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "encode!",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "each_value",
      "relationship": "calls"
    },
    {
      "from": "Base::force_encoding",
      "to": "force_encoding",
      "relationship": "calls"
    },
    {
      "from": "Base::force_encoding",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "test?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "development?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "add_charset",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "require",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "hex",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "format",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "rand",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "**",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "Integer",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "unshift",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "dirname",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "root",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "exist?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "configure",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "instance_of?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "sub",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "script_name",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "call!",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "reload_templates",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "clear",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "template_cache",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "invoke",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "dispatch!",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "error_block!",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "default_content_type",
      "relationship": "calls"
    },
    {
      "from": "call!",
      "to": "finish",
      "relationship": "calls"
    },
    {
      "from": "settings",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "settings",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "halt",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "halt",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "halt",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "halt",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "pass",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "forward",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "forward",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "forward",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "forward",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "forward",
      "to": "status=",
      "relationship": "calls"
    },
    {
      "from": "forward",
      "to": "body=",
      "relationship": "calls"
    },
    {
      "from": "forward",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "forward",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "filter!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "filter!",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "filter!",
      "to": "filter!",
      "relationship": "calls"
    },
    {
      "from": "filter!",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "filter!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "filter!",
      "to": "filters",
      "relationship": "calls"
    },
    {
      "from": "filter!",
      "to": "process_route",
      "relationship": "calls"
    },
    {
      "from": "filter!",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "filter!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "routes",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "delete_header",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "process_route",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "route_eval",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "route!",
      "relationship": "calls"
    },
    {
      "from": "route!",
      "to": "route_missing",
      "relationship": "calls"
    },
    {
      "from": "route_eval",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "path_info",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "empty_path_info?",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "strict_paths?",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "end_with?",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "force_encoding",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "patterns",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "captures",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "match",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "flatten",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "catch",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "bind",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "throw",
      "relationship": "calls"
    },
    {
      "from": "process_route",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "route_missing",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "route_missing",
      "to": "forward",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "public_folder",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "path_info",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "valid_path?",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "file?",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "static_cache_control?",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "cache_control",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "static_cache_control",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "send_file",
      "relationship": "calls"
    },
    {
      "from": "static!",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "catch",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "shift",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "invoke",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "frozen?",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "force_encoding",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "invoke",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "static?",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "get?",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "head?",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "static!",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "filter!",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "route!",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "handle_exception!",
      "relationship": "calls"
    },
    {
      "from": "dispatch!",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "http_status",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "use_code?",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "code",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "server_error?",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "dump_errors?",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "dump_errors!",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "show_exceptions?",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "show_exceptions",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "not_found?",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "x_cascade?",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "error_block!",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "bad_request?",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "escape_html",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "handle_exception!",
      "to": "raise_errors?",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "errors",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "reverse_each",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "process_route",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "error_block!",
      "to": "error_block!",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "detailed_message",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "quote",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "lines",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "strftime",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "backtrace",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "puts",
      "relationship": "calls"
    },
    {
      "from": "dump_errors!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "reset!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "reset!",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "reset!",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "reset!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "reset!",
      "to": "templates",
      "relationship": "calls"
    },
    {
      "from": "extensions",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "extensions",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "extensions",
      "to": "uniq",
      "relationship": "calls"
    },
    {
      "from": "extensions",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "extensions",
      "to": "extensions",
      "relationship": "calls"
    },
    {
      "from": "middleware",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "middleware",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "middleware",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "middleware",
      "to": "middleware",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "__send__",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "define_singleton",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "method_defined?",
      "relationship": "calls"
    },
    {
      "from": "enable",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "enable",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "disable",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "disable",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "compile!",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "flat_map",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "template",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "template",
      "to": "caller_locations",
      "relationship": "calls"
    },
    {
      "from": "template",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "template",
      "to": "templates",
      "relationship": "calls"
    },
    {
      "from": "template",
      "to": "to_i",
      "relationship": "calls"
    },
    {
      "from": "layout",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "binread",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "default_encoding",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "count",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "force_encoding",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "each_line",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "templates",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "mime_type",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "mime_type",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "mime_type",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "mime_type",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "mime_type",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "mime_type",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "mime_types",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "mime_types",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "before",
      "to": "add_filter",
      "relationship": "calls"
    },
    {
      "from": "after",
      "to": "add_filter",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "filters",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "compile!",
      "relationship": "calls"
    },
    {
      "from": "condition",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "condition",
      "to": "generate_method",
      "relationship": "calls"
    },
    {
      "from": "public=",
      "to": "warn_for_deprecation",
      "relationship": "calls"
    },
    {
      "from": "public=",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "public_dir=",
      "to": "public_folder=",
      "relationship": "calls"
    },
    {
      "from": "public_dir",
      "to": "public_folder",
      "relationship": "calls"
    },
    {
      "from": "get",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "get",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "put",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "post",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "delete",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "head",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "options",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "patch",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "unlink",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "helpers",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "helpers",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "helpers",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "helpers",
      "to": "include",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "registered",
      "relationship": "calls"
    },
    {
      "from": "development?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "development?",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "production?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "production?",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "test?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "test?",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "configure",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "configure",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "configure",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "configure",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "use",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "running?",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "running_server",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "stop!",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "stop",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "suppress_messages?",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "on_stop_callback",
      "relationship": "calls"
    },
    {
      "from": "quit!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "exit",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "running?",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "pick",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "server_settings",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "bind",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "start_server",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "quit!",
      "relationship": "calls"
    },
    {
      "from": "running?",
      "to": "running_server?",
      "relationship": "calls"
    },
    {
      "from": "prototype",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "new",
      "to": "new!",
      "relationship": "calls"
    },
    {
      "from": "new",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "new",
      "to": "to_app",
      "relationship": "calls"
    },
    {
      "from": "new",
      "to": "build",
      "relationship": "calls"
    },
    {
      "from": "build",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "build",
      "to": "setup_default_middleware",
      "relationship": "calls"
    },
    {
      "from": "build",
      "to": "setup_middleware",
      "relationship": "calls"
    },
    {
      "from": "build",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "synchronize",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "prototype",
      "relationship": "calls"
    },
    {
      "from": "caller_files",
      "to": "flatten",
      "relationship": "calls"
    },
    {
      "from": "caller_files",
      "to": "cleaned_caller",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "prototype",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "suppress_messages?",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "setup_traps",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "threaded=",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "threaded",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "on_start_callback",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "start_server",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "suppress_messages?",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "suppress_messages?",
      "to": "handler_name",
      "relationship": "calls"
    },
    {
      "from": "suppress_messages?",
      "to": "quiet",
      "relationship": "calls"
    },
    {
      "from": "setup_traps",
      "to": "traps?",
      "relationship": "calls"
    },
    {
      "from": "setup_traps",
      "to": "at_exit",
      "relationship": "calls"
    },
    {
      "from": "setup_traps",
      "to": "quit!",
      "relationship": "calls"
    },
    {
      "from": "setup_traps",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "setup_traps",
      "to": "trap",
      "relationship": "calls"
    },
    {
      "from": "setup_traps",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "setup_traps",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "setup_traps",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "define_singleton",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "define_singleton",
      "to": "singleton_class",
      "relationship": "calls"
    },
    {
      "from": "define_singleton",
      "to": "method_defined?",
      "relationship": "calls"
    },
    {
      "from": "define_singleton",
      "to": "undef_method",
      "relationship": "calls"
    },
    {
      "from": "define_singleton",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "define_singleton",
      "to": "define_method",
      "relationship": "calls"
    },
    {
      "from": "host_name",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "host_name",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "host_name",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "host_name",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "user_agent",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "user_agent",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "user_agent",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "user_agent",
      "to": "user_agent",
      "relationship": "calls"
    },
    {
      "from": "user_agent",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "user_agent",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "user_agent",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "mime_types",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "flatten!",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "provides",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "empty_path_info",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "enable",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "compile!",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "invoke_hook",
      "relationship": "calls"
    },
    {
      "from": "invoke_hook",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "invoke_hook",
      "to": "extensions",
      "relationship": "calls"
    },
    {
      "from": "invoke_hook",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "invoke_hook",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "generate_method",
      "to": "define_method",
      "relationship": "calls"
    },
    {
      "from": "generate_method",
      "to": "instance_method",
      "relationship": "calls"
    },
    {
      "from": "generate_method",
      "to": "remove_method",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "host_name",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "each_pair",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "compile",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "generate_method",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "zero?",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "arity",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "bind",
      "relationship": "calls"
    },
    {
      "from": "compile",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "compile",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "compile",
      "to": "mustermann_opts",
      "relationship": "calls"
    },
    {
      "from": "setup_default_middleware",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "setup_default_middleware",
      "to": "show_exceptions?",
      "relationship": "calls"
    },
    {
      "from": "setup_default_middleware",
      "to": "method_override?",
      "relationship": "calls"
    },
    {
      "from": "setup_default_middleware",
      "to": "setup_logging",
      "relationship": "calls"
    },
    {
      "from": "setup_default_middleware",
      "to": "setup_sessions",
      "relationship": "calls"
    },
    {
      "from": "setup_default_middleware",
      "to": "setup_protection",
      "relationship": "calls"
    },
    {
      "from": "setup_middleware",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "setup_middleware",
      "to": "middleware",
      "relationship": "calls"
    },
    {
      "from": "setup_middleware",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "setup_logging",
      "to": "logging?",
      "relationship": "calls"
    },
    {
      "from": "setup_logging",
      "to": "setup_common_logger",
      "relationship": "calls"
    },
    {
      "from": "setup_logging",
      "to": "setup_custom_logger",
      "relationship": "calls"
    },
    {
      "from": "setup_logging",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "setup_logging",
      "to": "logging",
      "relationship": "calls"
    },
    {
      "from": "setup_logging",
      "to": "setup_null_logger",
      "relationship": "calls"
    },
    {
      "from": "setup_null_logger",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "setup_common_logger",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "setup_custom_logger",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "setup_custom_logger",
      "to": "logging",
      "relationship": "calls"
    },
    {
      "from": "setup_custom_logger",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "protection?",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "protection",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "sessions?",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "setup_protection",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "sessions?",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "session_secret?",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "session_secret",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "sessions",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "setup_sessions",
      "to": "session_store",
      "relationship": "calls"
    },
    {
      "from": "inherited",
      "to": "reset!",
      "relationship": "calls"
    },
    {
      "from": "inherited",
      "to": "app_file?",
      "relationship": "calls"
    },
    {
      "from": "inherited",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "inherited",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "inherited",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "synchronize",
      "to": "lock?",
      "relationship": "calls"
    },
    {
      "from": "synchronize",
      "to": "synchronize",
      "relationship": "calls"
    },
    {
      "from": "warn_for_deprecation",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "warn_for_deprecation",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "warn_for_deprecation",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "warn_for_deprecation",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "warn_for_deprecation",
      "to": "cleaned_caller",
      "relationship": "calls"
    },
    {
      "from": "cleaned_caller",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "cleaned_caller",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "cleaned_caller",
      "to": "caller",
      "relationship": "calls"
    },
    {
      "from": "cleaned_caller",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "cleaned_caller",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "cleaned_caller",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "cleaned_caller",
      "to": "callers_to_ignore",
      "relationship": "calls"
    },
    {
      "from": "cleaned_caller",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "force_encoding",
      "to": "force_encoding",
      "relationship": "calls"
    },
    {
      "from": "force_encoding",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "test?",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "flat_map",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "delegate",
      "relationship": "calls"
    },
    {
      "from": "Wrapper::settings",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Wrapper",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Wrapper::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Wrapper",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Wrapper::inspect",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Wrapper::inspect",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "Wrapper::inspect",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "Wrapper::inspect",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Wrapper",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Wrapper",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "Wrapper",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "inspect",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "inspect",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "inspect",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "inspect",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::default",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::default",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::default=",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::assoc",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::rassoc",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::fetch",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::fetch",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::fetch",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::[]",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::[]=",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::[]=",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::key",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::key?",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::value?",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::delete",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::dig",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::fetch_values",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::fetch_values",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::slice",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::slice",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::slice",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::slice",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::values_at",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::values_at",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "each_pair",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge!",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "each_pair",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::merge",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::replace",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::replace",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::replace",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::transform_values",
      "to": "transform_values!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::transform_values",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "transform_values!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::transform_values!",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::transform_keys",
      "to": "transform_keys!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::transform_keys",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "transform_keys!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::transform_keys!",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::select",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::select",
      "to": "to_enum",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::select",
      "to": "tap",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::select",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::select",
      "to": "select!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "to_enum",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "tap",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "select!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::reject",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::reject",
      "to": "to_enum",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::reject",
      "to": "tap",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::reject",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::reject",
      "to": "reject!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "reject!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::compact",
      "to": "tap",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::compact",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": ">=",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::except",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::except",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::convert_key",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::convert_key",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::convert_value",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::convert_value",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::convert_value",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::convert_value",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash::convert_value",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "IndifferentHash",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "default",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "default",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "default=",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "assoc",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "rassoc",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "fetch",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "fetch",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "fetch",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "[]",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "[]=",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "[]=",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "key",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "key?",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "value?",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "delete",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "dig",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "fetch_values",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "fetch_values",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "slice",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "slice",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "slice",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "slice",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "values_at",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "values_at",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "each_pair",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "convert_key",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "convert_value",
      "relationship": "calls"
    },
    {
      "from": "merge",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "merge",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "replace",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "replace",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "replace",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "transform_values",
      "to": "transform_values!",
      "relationship": "calls"
    },
    {
      "from": "transform_values",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "transform_values!",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "transform_keys",
      "to": "transform_keys!",
      "relationship": "calls"
    },
    {
      "from": "transform_keys",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "transform_keys!",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "select",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "select",
      "to": "to_enum",
      "relationship": "calls"
    },
    {
      "from": "select",
      "to": "tap",
      "relationship": "calls"
    },
    {
      "from": "select",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "select",
      "to": "select!",
      "relationship": "calls"
    },
    {
      "from": "reject",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "reject",
      "to": "to_enum",
      "relationship": "calls"
    },
    {
      "from": "reject",
      "to": "tap",
      "relationship": "calls"
    },
    {
      "from": "reject",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "reject",
      "to": "reject!",
      "relationship": "calls"
    },
    {
      "from": "compact",
      "to": "tap",
      "relationship": "calls"
    },
    {
      "from": "compact",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "except",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "except",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "convert_key",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "convert_key",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "convert_value",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "convert_value",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "convert_value",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "convert_value",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "convert_value",
      "to": "method",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "run?",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Application",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Builder",
      "to": "include",
      "relationship": "calls"
    },
    {
      "from": "Logger::call",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Logger::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Logger::call",
      "to": "level=",
      "relationship": "calls"
    },
    {
      "from": "Logger::call",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Logger::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Logger",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Logger",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Logger",
      "to": "level=",
      "relationship": "calls"
    },
    {
      "from": "Logger",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Logger",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "level=",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::call",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::call",
      "to": "prefers_plain_text?",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::call",
      "to": "dump_exception",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::call",
      "to": "pretty",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::call",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::call",
      "to": "bytesize",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "prefers_plain_text?",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "dump_exception",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "pretty",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "bytesize",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::bad_request?",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::prefers_plain_text?",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::prefers_plain_text?",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::prefers_plain_text?",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::prefers_plain_text?",
      "to": "index",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::prefers_plain_text?",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::prefers_plain_text?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "index",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::frame_class",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::frame_class",
      "to": "filename",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::frame_class",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions::frame_class",
      "to": "dir",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "filename",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "ShowExceptions",
      "to": "dir",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "prefers_plain_text?",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "dump_exception",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "pretty",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "bytesize",
      "relationship": "calls"
    },
    {
      "from": "bad_request?",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "prefers_plain_text?",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "prefers_plain_text?",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "prefers_plain_text?",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "prefers_plain_text?",
      "to": "index",
      "relationship": "calls"
    },
    {
      "from": "prefers_plain_text?",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "prefers_plain_text?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "frame_class",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "frame_class",
      "to": "filename",
      "relationship": "calls"
    },
    {
      "from": "frame_class",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "frame_class",
      "to": "dir",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "mask_authenticity_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "urlsafe_base64",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::accepts?",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::accepts?",
      "to": "set_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::accepts?",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::accepts?",
      "to": "valid_token?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::accepts?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::accepts?",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::accepts?",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::accepts?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "set_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "valid_token?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::mask_authenticity_token",
      "to": "set_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::mask_authenticity_token",
      "to": "per_form_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::mask_authenticity_token",
      "to": "global_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::mask_authenticity_token",
      "to": "mask_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "per_form_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "global_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "mask_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "private_constant",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::set_token",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::set_token",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::set_token",
      "to": "random_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::set_token",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "random_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "decode_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "unmasked_token?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "compare_with_real_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "masked_token?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "unmask_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "compare_with_global_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "compare_with_per_form_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::valid_token?",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "decode_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "unmasked_token?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "compare_with_real_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "masked_token?",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "unmask_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "compare_with_global_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "compare_with_per_form_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::mask_token",
      "to": "random_bytes",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::mask_token",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::mask_token",
      "to": "xor_byte_strings",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::mask_token",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::mask_token",
      "to": "encode_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "random_bytes",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "xor_byte_strings",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "encode_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::unmask_token",
      "to": "/",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::unmask_token",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::unmask_token",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::unmask_token",
      "to": "xor_byte_strings",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "/",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::unmasked_token?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::unmasked_token?",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::masked_token?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::masked_token?",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::masked_token?",
      "to": "*",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "*",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::compare_with_real_token",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::compare_with_real_token",
      "to": "real_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "real_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::compare_with_global_token",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::compare_with_global_token",
      "to": "global_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::compare_with_per_form_token",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::compare_with_per_form_token",
      "to": "per_form_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::compare_with_per_form_token",
      "to": "chomp",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::compare_with_per_form_token",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::compare_with_per_form_token",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "chomp",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::real_token",
      "to": "decode_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::real_token",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::real_token",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::global_token",
      "to": "token_hmac",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "token_hmac",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::per_form_token",
      "to": "token_hmac",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::per_form_token",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::encode_token",
      "to": "urlsafe_encode64",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "urlsafe_encode64",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::decode_token",
      "to": "urlsafe_decode64",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "urlsafe_decode64",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::token_hmac",
      "to": "digest",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::token_hmac",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::token_hmac",
      "to": "real_token",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "digest",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::xor_byte_strings",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::xor_byte_strings",
      "to": "bytesize",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::xor_byte_strings",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::xor_byte_strings",
      "to": "setbyte",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::xor_byte_strings",
      "to": "^",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken::xor_byte_strings",
      "to": "getbyte",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "bytesize",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "setbyte",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "^",
      "relationship": "calls"
    },
    {
      "from": "AuthenticityToken",
      "to": "getbyte",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "set_token",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "valid_token?",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "mask_authenticity_token",
      "to": "set_token",
      "relationship": "calls"
    },
    {
      "from": "mask_authenticity_token",
      "to": "per_form_token",
      "relationship": "calls"
    },
    {
      "from": "mask_authenticity_token",
      "to": "global_token",
      "relationship": "calls"
    },
    {
      "from": "mask_authenticity_token",
      "to": "mask_token",
      "relationship": "calls"
    },
    {
      "from": "set_token",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "set_token",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "set_token",
      "to": "random_token",
      "relationship": "calls"
    },
    {
      "from": "set_token",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "decode_token",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "unmasked_token?",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "compare_with_real_token",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "masked_token?",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "unmask_token",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "compare_with_global_token",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "compare_with_per_form_token",
      "relationship": "calls"
    },
    {
      "from": "valid_token?",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "mask_token",
      "to": "random_bytes",
      "relationship": "calls"
    },
    {
      "from": "mask_token",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "mask_token",
      "to": "xor_byte_strings",
      "relationship": "calls"
    },
    {
      "from": "mask_token",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "mask_token",
      "to": "encode_token",
      "relationship": "calls"
    },
    {
      "from": "unmask_token",
      "to": "/",
      "relationship": "calls"
    },
    {
      "from": "unmask_token",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "unmask_token",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "unmask_token",
      "to": "xor_byte_strings",
      "relationship": "calls"
    },
    {
      "from": "unmasked_token?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "unmasked_token?",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "masked_token?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "masked_token?",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "masked_token?",
      "to": "*",
      "relationship": "calls"
    },
    {
      "from": "compare_with_real_token",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "compare_with_real_token",
      "to": "real_token",
      "relationship": "calls"
    },
    {
      "from": "compare_with_global_token",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "compare_with_global_token",
      "to": "global_token",
      "relationship": "calls"
    },
    {
      "from": "compare_with_per_form_token",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "compare_with_per_form_token",
      "to": "per_form_token",
      "relationship": "calls"
    },
    {
      "from": "compare_with_per_form_token",
      "to": "chomp",
      "relationship": "calls"
    },
    {
      "from": "compare_with_per_form_token",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "compare_with_per_form_token",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "real_token",
      "to": "decode_token",
      "relationship": "calls"
    },
    {
      "from": "real_token",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "real_token",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "global_token",
      "to": "token_hmac",
      "relationship": "calls"
    },
    {
      "from": "per_form_token",
      "to": "token_hmac",
      "relationship": "calls"
    },
    {
      "from": "per_form_token",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "encode_token",
      "to": "urlsafe_encode64",
      "relationship": "calls"
    },
    {
      "from": "decode_token",
      "to": "urlsafe_decode64",
      "relationship": "calls"
    },
    {
      "from": "token_hmac",
      "to": "digest",
      "relationship": "calls"
    },
    {
      "from": "token_hmac",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "token_hmac",
      "to": "real_token",
      "relationship": "calls"
    },
    {
      "from": "xor_byte_strings",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "xor_byte_strings",
      "to": "bytesize",
      "relationship": "calls"
    },
    {
      "from": "xor_byte_strings",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "xor_byte_strings",
      "to": "setbyte",
      "relationship": "calls"
    },
    {
      "from": "xor_byte_strings",
      "to": "^",
      "relationship": "calls"
    },
    {
      "from": "xor_byte_strings",
      "to": "getbyte",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "alias_method",
      "relationship": "calls"
    },
    {
      "from": "Base::initialize",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Base::initialize",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "Base::safe?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Base::safe?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::accepts?",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Base::accepts?",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base::call",
      "to": "accepts?",
      "relationship": "calls"
    },
    {
      "from": "Base::call",
      "to": "instrument",
      "relationship": "calls"
    },
    {
      "from": "Base::call",
      "to": "react",
      "relationship": "calls"
    },
    {
      "from": "Base::call",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "accepts?",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "instrument",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "react",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "Base::react",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "Base::react",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::react",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::react",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Base::react",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::react",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "Base::warn",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::warn",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::warn",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base::warn",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Base::instrument",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::instrument",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::instrument",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::instrument",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "Base::instrument",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "Base::instrument",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Base::instrument",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "Base::instrument",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base::instrument",
      "to": "instrument",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "Base::deny",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Base::deny",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base::deny",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::deny",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::report",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Base::report",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base::report",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Base::report",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::report",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::session?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Base::session?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::session?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::session",
      "to": "session?",
      "relationship": "calls"
    },
    {
      "from": "Base::session",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::session",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::session",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Base::session",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "session?",
      "relationship": "calls"
    },
    {
      "from": "Base::drop_session",
      "to": "session?",
      "relationship": "calls"
    },
    {
      "from": "Base::drop_session",
      "to": "clear",
      "relationship": "calls"
    },
    {
      "from": "Base::drop_session",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "Base::drop_session",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Base::drop_session",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::drop_session",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Base::drop_session",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "Base::referrer",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Base::referrer",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::referrer",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Base::referrer",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::referrer",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Base::referrer",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "Base::referrer",
      "to": "parse",
      "relationship": "calls"
    },
    {
      "from": "Base::referrer",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "parse",
      "relationship": "calls"
    },
    {
      "from": "Base::origin",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::random_string",
      "to": "hex",
      "relationship": "calls"
    },
    {
      "from": "Base::random_string",
      "to": "%",
      "relationship": "calls"
    },
    {
      "from": "Base::random_string",
      "to": "rand",
      "relationship": "calls"
    },
    {
      "from": "Base::random_string",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "Base::random_string",
      "to": "**",
      "relationship": "calls"
    },
    {
      "from": "Base::random_string",
      "to": "random_string",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "%",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "random_string",
      "relationship": "calls"
    },
    {
      "from": "Base::encrypt",
      "to": "hexdigest",
      "relationship": "calls"
    },
    {
      "from": "Base::encrypt",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::encrypt",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::encrypt",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "hexdigest",
      "relationship": "calls"
    },
    {
      "from": "Base::secure_compare",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "Base::secure_compare",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "Base::html?",
      "to": "detect",
      "relationship": "calls"
    },
    {
      "from": "Base::html?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Base::html?",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "Base::html?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Base::html?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Base::html?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "Base::html?",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "detect",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "safe?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "safe?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "accepts?",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "instrument",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "react",
      "relationship": "calls"
    },
    {
      "from": "react",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "react",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "react",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "react",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "react",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "react",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "warn",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "warn",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "warn",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "warn",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "instrument",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "instrument",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "instrument",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "instrument",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "instrument",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "instrument",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "instrument",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "instrument",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "instrument",
      "to": "instrument",
      "relationship": "calls"
    },
    {
      "from": "deny",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "deny",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "deny",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "deny",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "report",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "report",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "report",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "report",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "report",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "session?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "session?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "session?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "session?",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "drop_session",
      "to": "session?",
      "relationship": "calls"
    },
    {
      "from": "drop_session",
      "to": "clear",
      "relationship": "calls"
    },
    {
      "from": "drop_session",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "drop_session",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "drop_session",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "drop_session",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "drop_session",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "referrer",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "referrer",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "referrer",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "referrer",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "referrer",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "referrer",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "referrer",
      "to": "parse",
      "relationship": "calls"
    },
    {
      "from": "referrer",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "origin",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "random_string",
      "to": "hex",
      "relationship": "calls"
    },
    {
      "from": "random_string",
      "to": "%",
      "relationship": "calls"
    },
    {
      "from": "random_string",
      "to": "rand",
      "relationship": "calls"
    },
    {
      "from": "random_string",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "random_string",
      "to": "**",
      "relationship": "calls"
    },
    {
      "from": "random_string",
      "to": "random_string",
      "relationship": "calls"
    },
    {
      "from": "encrypt",
      "to": "hexdigest",
      "relationship": "calls"
    },
    {
      "from": "encrypt",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "encrypt",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "encrypt",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "secure_compare",
      "to": "secure_compare",
      "relationship": "calls"
    },
    {
      "from": "secure_compare",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "html?",
      "to": "detect",
      "relationship": "calls"
    },
    {
      "from": "html?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "html?",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "html?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "html?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "html?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "html?",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "sub",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "tr",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::csp_policy",
      "to": "compact",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "sub",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "tr",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "compact",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::call",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::call",
      "to": "html?",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy::call",
      "to": "csp_policy",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "html?",
      "relationship": "calls"
    },
    {
      "from": "ContentSecurityPolicy",
      "to": "csp_policy",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "sub",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "tr",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "csp_policy",
      "to": "compact",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "html?",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "csp_policy",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "default_reaction",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::call",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::call",
      "to": "remove_bad_cookies",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::call",
      "to": "finish",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "remove_bad_cookies",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "finish",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "parse_query",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "session_key",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "bad_cookies",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::accepts?",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "parse_query",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "session_key",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "bad_cookies",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::remove_bad_cookies",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::remove_bad_cookies",
      "to": "bad_cookies",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::remove_bad_cookies",
      "to": "cookie_paths",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::remove_bad_cookies",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::remove_bad_cookies",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::remove_bad_cookies",
      "to": "set_cookie",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::remove_bad_cookies",
      "to": "empty_cookie",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::remove_bad_cookies",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "cookie_paths",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "set_cookie",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "empty_cookie",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::redirect",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::redirect",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::redirect",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::redirect",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::cookie_paths",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::cookie_paths",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::cookie_paths",
      "to": "descend",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::cookie_paths",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::cookie_paths",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "descend",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::empty_cookie",
      "to": "at",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "at",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::session_key",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing::session_key",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "CookieTossing",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "remove_bad_cookies",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "finish",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "parse_query",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "session_key",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "bad_cookies",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "remove_bad_cookies",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "remove_bad_cookies",
      "to": "bad_cookies",
      "relationship": "calls"
    },
    {
      "from": "remove_bad_cookies",
      "to": "cookie_paths",
      "relationship": "calls"
    },
    {
      "from": "remove_bad_cookies",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "remove_bad_cookies",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "remove_bad_cookies",
      "to": "set_cookie",
      "relationship": "calls"
    },
    {
      "from": "remove_bad_cookies",
      "to": "empty_cookie",
      "relationship": "calls"
    },
    {
      "from": "remove_bad_cookies",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "redirect",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "cookie_paths",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "cookie_paths",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "cookie_paths",
      "to": "descend",
      "relationship": "calls"
    },
    {
      "from": "cookie_paths",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "cookie_paths",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "empty_cookie",
      "to": "at",
      "relationship": "calls"
    },
    {
      "from": "session_key",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "session_key",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "public",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::initialize",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::initialize",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::initialize",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::initialize",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::initialize",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::initialize",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::initialize",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::call",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::call",
      "to": "handle",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::call",
      "to": "GET",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::call",
      "to": "POST",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::call",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::call",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "handle",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "GET",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "POST",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::handle",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::handle",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::handle",
      "to": "escape",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "escape",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape",
      "to": "escape_hash",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape",
      "to": "escape",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape",
      "to": "escape_string",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "escape_hash",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "escape_string",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape_hash",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape_hash",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape_hash",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape_hash",
      "to": "escape",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape_string",
      "to": "escape_url",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape_string",
      "to": "escape_html",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams::escape_string",
      "to": "escape_javascript",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "escape_url",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "escape_html",
      "relationship": "calls"
    },
    {
      "from": "EscapedParams",
      "to": "escape_javascript",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "handle",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "GET",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "POST",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "handle",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "handle",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "handle",
      "to": "escape",
      "relationship": "calls"
    },
    {
      "from": "escape",
      "to": "escape_hash",
      "relationship": "calls"
    },
    {
      "from": "escape",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "escape",
      "to": "escape",
      "relationship": "calls"
    },
    {
      "from": "escape",
      "to": "escape_string",
      "relationship": "calls"
    },
    {
      "from": "escape_hash",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "escape_hash",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "escape_hash",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "escape_hash",
      "to": "escape",
      "relationship": "calls"
    },
    {
      "from": "escape_string",
      "to": "escape_url",
      "relationship": "calls"
    },
    {
      "from": "escape_string",
      "to": "escape_html",
      "relationship": "calls"
    },
    {
      "from": "escape_string",
      "to": "escape_javascript",
      "relationship": "calls"
    },
    {
      "from": "FormToken::accepts?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "FormToken::accepts?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "FormToken",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "FormToken",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::frame_options",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::frame_options",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::frame_options",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::frame_options",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::frame_options",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::frame_options",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::call",
      "to": "html?",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions::call",
      "to": "frame_options",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "html?",
      "relationship": "calls"
    },
    {
      "from": "FrameOptions",
      "to": "frame_options",
      "relationship": "calls"
    },
    {
      "from": "frame_options",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "frame_options",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "frame_options",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "frame_options",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "frame_options",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "frame_options",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "frame_options",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "default_reaction",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::base_url",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::base_url",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::base_url",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::base_url",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::base_url",
      "to": "scheme",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::base_url",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "scheme",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::accepts?",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::accepts?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::accepts?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::accepts?",
      "to": "base_url",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::accepts?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::accepts?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin::accepts?",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "base_url",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "HttpOrigin",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "base_url",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "base_url",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "base_url",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "base_url",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "base_url",
      "to": "scheme",
      "relationship": "calls"
    },
    {
      "from": "base_url",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "base_url",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing",
      "to": "default_reaction",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing::accepts?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing::accepts?",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing::accepts?",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing::accepts?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing::accepts?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IPSpoofing",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::call",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::call",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::call",
      "to": "has_vector?",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::call",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::call",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::call",
      "to": "react_and_close",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "has_vector?",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "react_and_close",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "xhr?",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "origin",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "referrer",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::has_vector?",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "xhr?",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "origin",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "referrer",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::react_and_close",
      "to": "react",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::react_and_close",
      "to": "close_body",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "react",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "close_body",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::close_body",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf::close_body",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "JsonCsrf",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "has_vector?",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "react_and_close",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "xhr?",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "origin",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "referrer",
      "relationship": "calls"
    },
    {
      "from": "has_vector?",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "react_and_close",
      "to": "react",
      "relationship": "calls"
    },
    {
      "from": "react_and_close",
      "to": "close_body",
      "relationship": "calls"
    },
    {
      "from": "close_body",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "close_body",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::call",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::call",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::call",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::call",
      "to": "cleanup",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::call",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "cleanup",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "encoding",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "encode",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal::cleanup",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "encoding",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "encode",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "PathTraversal",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "cleanup",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "encoding",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "encode",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "cleanup",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "ReferrerPolicy",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "ReferrerPolicy::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "ReferrerPolicy::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ReferrerPolicy::call",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "ReferrerPolicy",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "ReferrerPolicy",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ReferrerPolicy",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer",
      "to": "default_reaction",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer::accepts?",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer::accepts?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer::accepts?",
      "to": "referrer",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer::accepts?",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer::accepts?",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer",
      "to": "safe?",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer",
      "to": "referrer",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "RemoteReferrer",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "referrer",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "RemoteToken",
      "to": "default_reaction",
      "relationship": "calls"
    },
    {
      "from": "RemoteToken::accepts?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "RemoteToken::accepts?",
      "to": "referrer",
      "relationship": "calls"
    },
    {
      "from": "RemoteToken::accepts?",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "RemoteToken::accepts?",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "RemoteToken",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "RemoteToken",
      "to": "referrer",
      "relationship": "calls"
    },
    {
      "from": "RemoteToken",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "RemoteToken",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "default_reaction",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::accepts?",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::accepts?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::accepts?",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::accepts?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::accepts?",
      "to": "all?",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::accepts?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::accepts?",
      "to": "encode",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::accepts?",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::accepts?",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "all?",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "encode",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::encode",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking::encode",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "SessionHijacking",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "all?",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "encode",
      "relationship": "calls"
    },
    {
      "from": "accepts?",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "encode",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "encode",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport::strict_transport",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport::strict_transport",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport::strict_transport",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport::call",
      "to": "strict_transport",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "StrictTransport",
      "to": "strict_transport",
      "relationship": "calls"
    },
    {
      "from": "strict_transport",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "strict_transport",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "strict_transport",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "strict_transport",
      "relationship": "calls"
    },
    {
      "from": "XSSHeader",
      "to": "default_options",
      "relationship": "calls"
    },
    {
      "from": "XSSHeader::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "XSSHeader::call",
      "to": "html?",
      "relationship": "calls"
    },
    {
      "from": "XSSHeader::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "XSSHeader::call",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "XSSHeader",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "XSSHeader",
      "to": "html?",
      "relationship": "calls"
    },
    {
      "from": "XSSHeader",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "XSSHeader",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "backtrace",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "metadata",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "__finish__",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "arity",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "described_class",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "to_app",
      "relationship": "calls"
    },
    {
      "from": "with_headers",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "with_headers",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "env",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "env",
      "to": "current",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "ruby?",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "haml?",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "for_buffer",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "with_haml_buffer",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "capture_haml",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "eval",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "binding",
      "relationship": "calls"
    },
    {
      "from": "capture",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "capture_later",
      "to": "current_engine",
      "relationship": "calls"
    },
    {
      "from": "capture_later",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "capture_later",
      "to": "with_engine",
      "relationship": "calls"
    },
    {
      "from": "capture_later",
      "to": "capture",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "chdir",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "root",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "glob",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "extname",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "logging?",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "info",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "logger",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "result",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "unsafe_load",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "load",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "config_for_env",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "each_pair",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "config_for_env",
      "to": "environment_keys?",
      "relationship": "calls"
    },
    {
      "from": "config_for_env",
      "to": "from_environment_key",
      "relationship": "calls"
    },
    {
      "from": "config_for_env",
      "to": "each_with_object",
      "relationship": "calls"
    },
    {
      "from": "config_for_env",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "config_for_env",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "config_for_env",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "config_for_env",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "config_for_env",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "from_environment_key",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "from_environment_key",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "from_environment_key",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "from_environment_key",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "environment_keys?",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "environment_keys?",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "environment_keys?",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "environment_keys?",
      "to": "environments",
      "relationship": "calls"
    },
    {
      "from": "environment_keys?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "content_for",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "content_for",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "content_for",
      "to": "clear_content_for",
      "relationship": "calls"
    },
    {
      "from": "content_for",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "content_for",
      "to": "content_blocks",
      "relationship": "calls"
    },
    {
      "from": "content_for",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "content_for",
      "to": "capture_later",
      "relationship": "calls"
    },
    {
      "from": "content_for?",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "content_for?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "content_for?",
      "to": "content_blocks",
      "relationship": "calls"
    },
    {
      "from": "content_for?",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "clear_content_for",
      "to": "content_for?",
      "relationship": "calls"
    },
    {
      "from": "clear_content_for",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "clear_content_for",
      "to": "content_blocks",
      "relationship": "calls"
    },
    {
      "from": "clear_content_for",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "content_for?",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "haml?",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "capture_haml",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "content_blocks",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "capture",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "tap",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "erb?",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "erubi?",
      "relationship": "calls"
    },
    {
      "from": "yield_content",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "content_blocks",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "content_blocks",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "autoload",
      "relationship": "calls"
    },
    {
      "from": "helpers",
      "to": "autoload",
      "relationship": "calls"
    },
    {
      "from": "autoload",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "autoload",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "autoload",
      "to": "extensions",
      "relationship": "calls"
    },
    {
      "from": "autoload",
      "to": "autoload",
      "relationship": "calls"
    },
    {
      "from": "registered",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "registered",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "registered",
      "to": "const_get",
      "relationship": "calls"
    },
    {
      "from": "registered",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "registered",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "include",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "attr_reader",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "script_name",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "secure?",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "Jar::initialize",
      "to": "cookie_options",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "script_name",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "secure?",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "cookie_options",
      "relationship": "calls"
    },
    {
      "from": "Jar::==",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Jar::==",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Jar::==",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar::[]",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Jar::[]",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar::[]",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar::[]",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar::[]=",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "method_defined?",
      "relationship": "calls"
    },
    {
      "from": "Jar::assoc",
      "to": "assoc",
      "relationship": "calls"
    },
    {
      "from": "Jar::assoc",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar::assoc",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "assoc",
      "relationship": "calls"
    },
    {
      "from": "Jar::clear",
      "to": "each_key",
      "relationship": "calls"
    },
    {
      "from": "Jar::clear",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "each_key",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Jar::delete",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Jar::delete",
      "to": "delete_cookie",
      "relationship": "calls"
    },
    {
      "from": "Jar::delete",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "delete_cookie",
      "relationship": "calls"
    },
    {
      "from": "Jar::delete_if",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Jar::delete_if",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Jar::delete_if",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "Jar::delete_if",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Jar::delete_if",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Jar::each",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Jar::each",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Jar::each",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "Jar::each",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Jar::each",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_key",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_key",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_key",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_key",
      "to": "each_key",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_key",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_value",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_value",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_value",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_value",
      "to": "each_value",
      "relationship": "calls"
    },
    {
      "from": "Jar::each_value",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "each_value",
      "relationship": "calls"
    },
    {
      "from": "Jar::empty?",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "Jar::empty?",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar::fetch",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "Jar::fetch",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar::fetch",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar::fetch",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "Jar::flatten",
      "to": "flatten",
      "relationship": "calls"
    },
    {
      "from": "Jar::flatten",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "flatten",
      "relationship": "calls"
    },
    {
      "from": "Jar::has_key?",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "Jar::has_key?",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar::has_key?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar::has_key?",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "Jar::has_value?",
      "to": "value?",
      "relationship": "calls"
    },
    {
      "from": "Jar::has_value?",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar::has_value?",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "value?",
      "relationship": "calls"
    },
    {
      "from": "Jar::hash",
      "to": "hash",
      "relationship": "calls"
    },
    {
      "from": "Jar::hash",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "hash",
      "relationship": "calls"
    },
    {
      "from": "Jar::inspect",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Jar::inspect",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Jar::inspect",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "Jar::inspect",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "Jar::invert",
      "to": "invert",
      "relationship": "calls"
    },
    {
      "from": "Jar::invert",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "invert",
      "relationship": "calls"
    },
    {
      "from": "Jar::keep_if",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Jar::keep_if",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Jar::keep_if",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "Jar::keep_if",
      "to": "delete_if",
      "relationship": "calls"
    },
    {
      "from": "Jar::keep_if",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "delete_if",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Jar::key",
      "to": "key",
      "relationship": "calls"
    },
    {
      "from": "Jar::key",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "key",
      "relationship": "calls"
    },
    {
      "from": "Jar::keys",
      "to": "keys",
      "relationship": "calls"
    },
    {
      "from": "Jar::keys",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "keys",
      "relationship": "calls"
    },
    {
      "from": "Jar::length",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "Jar::length",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "Jar::merge",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Jar::merge",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Jar::merge!",
      "to": "each_pair",
      "relationship": "calls"
    },
    {
      "from": "Jar::merge!",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Jar::merge!",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Jar::merge!",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Jar::merge!",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar::merge!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "each_pair",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Jar::rassoc",
      "to": "rassoc",
      "relationship": "calls"
    },
    {
      "from": "Jar::rassoc",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "rassoc",
      "relationship": "calls"
    },
    {
      "from": "Jar::rehash",
      "to": "rehash",
      "relationship": "calls"
    },
    {
      "from": "Jar::rehash",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar::rehash",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "rehash",
      "relationship": "calls"
    },
    {
      "from": "Jar::reject",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Jar::reject",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Jar::reject",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "Jar::reject",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "Jar::reject",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "Jar::replace",
      "to": "select!",
      "relationship": "calls"
    },
    {
      "from": "Jar::replace",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Jar::replace",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar::replace",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "select!",
      "relationship": "calls"
    },
    {
      "from": "Jar::select",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Jar::select",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "Jar::select",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "Jar::select",
      "to": "select",
      "relationship": "calls"
    },
    {
      "from": "Jar::select",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "select",
      "relationship": "calls"
    },
    {
      "from": "Jar::set",
      "to": "set_cookie",
      "relationship": "calls"
    },
    {
      "from": "Jar::set",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar::set",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "set_cookie",
      "relationship": "calls"
    },
    {
      "from": "Jar::shift",
      "to": "shift",
      "relationship": "calls"
    },
    {
      "from": "Jar::shift",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar::shift",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "shift",
      "relationship": "calls"
    },
    {
      "from": "Jar::sort",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "Jar::sort",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "Jar::to_hash",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Jar::to_hash",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar::to_hash",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar::to_a",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "Jar::to_a",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "Jar::to_s",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar::to_s",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar::values",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "Jar::values",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "Jar::values_at",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "Jar::values_at",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "Jar::warn",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Jar::warn",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Jar::warn",
      "to": "caller",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "caller",
      "relationship": "calls"
    },
    {
      "from": "Jar::deleted",
      "to": "parse_response",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "parse_response",
      "relationship": "calls"
    },
    {
      "from": "Jar::response_cookies",
      "to": "parse_response",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Jar::parse_response",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "Jar::request_cookies",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "Jar::request_cookies",
      "to": "cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar::request_cookies",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Jar::request_cookies",
      "to": "deleted",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "cookies",
      "relationship": "calls"
    },
    {
      "from": "Jar",
      "to": "deleted",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "script_name",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "secure?",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "cookie_options",
      "relationship": "calls"
    },
    {
      "from": "==",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "==",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "==",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "[]",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "[]",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "[]",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "[]",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "[]=",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "assoc",
      "to": "assoc",
      "relationship": "calls"
    },
    {
      "from": "assoc",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "assoc",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "clear",
      "to": "each_key",
      "relationship": "calls"
    },
    {
      "from": "clear",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "delete",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "delete",
      "to": "delete_cookie",
      "relationship": "calls"
    },
    {
      "from": "delete",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "delete_if",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "delete_if",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "delete_if",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "delete_if",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "delete_if",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "each",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "each_key",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "each_key",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "each_key",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "each_key",
      "to": "each_key",
      "relationship": "calls"
    },
    {
      "from": "each_key",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "each_value",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "each_value",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "each_value",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "each_value",
      "to": "each_value",
      "relationship": "calls"
    },
    {
      "from": "each_value",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "empty?",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "empty?",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "fetch",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "fetch",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "fetch",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "flatten",
      "to": "flatten",
      "relationship": "calls"
    },
    {
      "from": "flatten",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "has_key?",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "has_key?",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "has_key?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "has_key?",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "has_value?",
      "to": "value?",
      "relationship": "calls"
    },
    {
      "from": "has_value?",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "has_value?",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "hash",
      "to": "hash",
      "relationship": "calls"
    },
    {
      "from": "hash",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "inspect",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "inspect",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "invert",
      "to": "invert",
      "relationship": "calls"
    },
    {
      "from": "invert",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "keep_if",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "keep_if",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "keep_if",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "keep_if",
      "to": "delete_if",
      "relationship": "calls"
    },
    {
      "from": "keep_if",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "key",
      "to": "key",
      "relationship": "calls"
    },
    {
      "from": "key",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "keys",
      "to": "keys",
      "relationship": "calls"
    },
    {
      "from": "keys",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "length",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "length",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "merge",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "merge",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "merge!",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "rassoc",
      "to": "rassoc",
      "relationship": "calls"
    },
    {
      "from": "rassoc",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "rehash",
      "to": "rehash",
      "relationship": "calls"
    },
    {
      "from": "rehash",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "rehash",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "reject",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "reject",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "reject",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "reject",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "replace",
      "to": "select!",
      "relationship": "calls"
    },
    {
      "from": "replace",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "replace",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "replace",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "select",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "select",
      "to": "__method__",
      "relationship": "calls"
    },
    {
      "from": "select",
      "to": "select",
      "relationship": "calls"
    },
    {
      "from": "select",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "set_cookie",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "shift",
      "to": "shift",
      "relationship": "calls"
    },
    {
      "from": "shift",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "shift",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "sort",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "sort",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "to_hash",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "to_hash",
      "to": "request_cookies",
      "relationship": "calls"
    },
    {
      "from": "to_hash",
      "to": "response_cookies",
      "relationship": "calls"
    },
    {
      "from": "to_a",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "to_a",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "to_s",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "to_s",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "values",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "values",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "values_at",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "values_at",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "warn",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "warn",
      "to": "caller",
      "relationship": "calls"
    },
    {
      "from": "deleted",
      "to": "parse_response",
      "relationship": "calls"
    },
    {
      "from": "response_cookies",
      "to": "parse_response",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "unescape",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "parse_response",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "request_cookies",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "request_cookies",
      "to": "cookies",
      "relationship": "calls"
    },
    {
      "from": "request_cookies",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "request_cookies",
      "to": "deleted",
      "relationship": "calls"
    },
    {
      "from": "cookies",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "logger",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "logger",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "erb?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "erubi?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "erubi?",
      "to": "erb?",
      "relationship": "calls"
    },
    {
      "from": "erubi?",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "haml?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "sass?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "scss?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "builder?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "liquid?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "markdown?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "rdoc?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "markaby?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "nokogiri?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "slim?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "ruby?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "with_engine",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "with_engine",
      "relationship": "calls"
    },
    {
      "from": "configure",
      "to": "record",
      "relationship": "calls"
    },
    {
      "from": "configure",
      "to": "instance_exec",
      "relationship": "calls"
    },
    {
      "from": "registered",
      "to": "replay",
      "relationship": "calls"
    },
    {
      "from": "registered",
      "to": "record",
      "relationship": "calls"
    },
    {
      "from": "record",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "record",
      "to": "recorded_methods",
      "relationship": "calls"
    },
    {
      "from": "replay",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "replay",
      "to": "recorded_methods",
      "relationship": "calls"
    },
    {
      "from": "replay",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "record",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "DontCall::method_missing",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "DontCall",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "DontCall::inspect",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "DontCall",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "surround",
      "to": "chomp",
      "relationship": "calls"
    },
    {
      "from": "surround",
      "to": "_capture_haml",
      "relationship": "calls"
    },
    {
      "from": "precede",
      "to": "chomp",
      "relationship": "calls"
    },
    {
      "from": "precede",
      "to": "_capture_haml",
      "relationship": "calls"
    },
    {
      "from": "succeed",
      "to": "chomp",
      "relationship": "calls"
    },
    {
      "from": "succeed",
      "to": "_capture_haml",
      "relationship": "calls"
    },
    {
      "from": "_capture_haml",
      "to": "capture",
      "relationship": "calls"
    },
    {
      "from": "encode",
      "to": "dump",
      "relationship": "calls"
    },
    {
      "from": "json",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "json",
      "to": "resolve_content_type",
      "relationship": "calls"
    },
    {
      "from": "json",
      "to": "resolve_encoder_action",
      "relationship": "calls"
    },
    {
      "from": "json",
      "to": "resolve_encoder",
      "relationship": "calls"
    },
    {
      "from": "resolve_content_type",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "resolve_content_type",
      "to": "json_content_type",
      "relationship": "calls"
    },
    {
      "from": "resolve_content_type",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "resolve_encoder",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "resolve_encoder",
      "to": "json_encoder",
      "relationship": "calls"
    },
    {
      "from": "resolve_encoder",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "resolve_encoder_action",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "resolve_encoder_action",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "resolve_encoder_action",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "resolve_encoder_action",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "resolve_encoder_action",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "resolve_encoder_action",
      "to": "__send__",
      "relationship": "calls"
    },
    {
      "from": "prefetch",
      "to": "link",
      "relationship": "calls"
    },
    {
      "from": "stylesheet",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "stylesheet",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "stylesheet",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "stylesheet",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "stylesheet",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "stylesheet",
      "to": "link",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "shift",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "%",
      "relationship": "calls"
    },
    {
      "from": "link_headers",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "link_headers",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "link_headers",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "link_headers",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "link_headers",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "link_headers",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "link_headers",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "head",
      "to": "route_args",
      "relationship": "calls"
    },
    {
      "from": "delete",
      "to": "route_args",
      "relationship": "calls"
    },
    {
      "from": "get",
      "to": "route_args",
      "relationship": "calls"
    },
    {
      "from": "options",
      "to": "route_args",
      "relationship": "calls"
    },
    {
      "from": "patch",
      "to": "route_args",
      "relationship": "calls"
    },
    {
      "from": "post",
      "to": "route_args",
      "relationship": "calls"
    },
    {
      "from": "put",
      "to": "route_args",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "route",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "route_args",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "route_args",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "route_args",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "template_cache",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "template_cache",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "redirect_to",
      "to": "redirect",
      "relationship": "calls"
    },
    {
      "from": "redirect_to",
      "to": "pattern",
      "relationship": "calls"
    },
    {
      "from": "namespace",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "errors",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "errors",
      "to": "errors",
      "relationship": "calls"
    },
    {
      "from": "errors",
      "to": "base",
      "relationship": "calls"
    },
    {
      "from": "errors",
      "to": "namespace_errors",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "flatten",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "respond_to",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "base",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "set",
      "to": "singleton_class",
      "relationship": "calls"
    },
    {
      "from": "template",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "template",
      "to": "lineno",
      "relationship": "calls"
    },
    {
      "from": "app",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "app",
      "to": "base",
      "relationship": "calls"
    },
    {
      "from": "compile",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "compile",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "compile",
      "to": "prefixed_path",
      "relationship": "calls"
    },
    {
      "from": "prefixed_path",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "prefixed_path",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "prefixed_path",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "prefixed",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "prefixed",
      "to": "compile",
      "relationship": "calls"
    },
    {
      "from": "prefixed",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "prefixed",
      "to": "base",
      "relationship": "calls"
    },
    {
      "from": "prefixed",
      "to": "invoke_hook",
      "relationship": "calls"
    },
    {
      "from": "prefixed",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "prefixed",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "base",
      "relationship": "calls"
    },
    {
      "from": "respond_to?",
      "to": "base",
      "relationship": "calls"
    },
    {
      "from": "log",
      "to": "=~",
      "relationship": "calls"
    },
    {
      "from": "log",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "List::initialize",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "List::initialize",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "List::watch",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "List::watch",
      "to": "elements",
      "relationship": "calls"
    },
    {
      "from": "List::watch",
      "to": "watcher_for",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "elements",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "watcher_for",
      "relationship": "calls"
    },
    {
      "from": "List::ignore",
      "to": "ignore",
      "relationship": "calls"
    },
    {
      "from": "List::ignore",
      "to": "watcher_for",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "ignore",
      "relationship": "calls"
    },
    {
      "from": "List::watcher_for",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "List::watcher_for",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "List::watchers",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "List::updated",
      "to": "find_all",
      "relationship": "calls"
    },
    {
      "from": "List::updated",
      "to": "watchers",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "find_all",
      "relationship": "calls"
    },
    {
      "from": "List",
      "to": "watchers",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Watcher::initialize",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Watcher::initialize",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Watcher::watch",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Watcher::watch",
      "to": "elements",
      "relationship": "calls"
    },
    {
      "from": "Watcher::watch",
      "to": "watcher_for",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "elements",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "watcher_for",
      "relationship": "calls"
    },
    {
      "from": "Watcher::ignore",
      "to": "ignore",
      "relationship": "calls"
    },
    {
      "from": "Watcher::ignore",
      "to": "watcher_for",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "ignore",
      "relationship": "calls"
    },
    {
      "from": "Watcher::watcher_for",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Watcher::watcher_for",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "Watcher::watchers",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "Watcher::updated",
      "to": "find_all",
      "relationship": "calls"
    },
    {
      "from": "Watcher::updated",
      "to": "watchers",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "find_all",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "watchers",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "attr_reader",
      "relationship": "calls"
    },
    {
      "from": "Watcher::initialize",
      "to": "update",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "update",
      "relationship": "calls"
    },
    {
      "from": "Watcher::updated?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Watcher::updated?",
      "to": "ignore?",
      "relationship": "calls"
    },
    {
      "from": "Watcher::updated?",
      "to": "removed?",
      "relationship": "calls"
    },
    {
      "from": "Watcher::updated?",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "Watcher::updated?",
      "to": "mtime",
      "relationship": "calls"
    },
    {
      "from": "Watcher::updated?",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "ignore?",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "removed?",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "mtime",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "Watcher::update",
      "to": "mtime",
      "relationship": "calls"
    },
    {
      "from": "Watcher::update",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "Watcher::inline_templates?",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Watcher::inline_templates?",
      "to": "elements",
      "relationship": "calls"
    },
    {
      "from": "Watcher::inline_templates?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Watcher::inline_templates?",
      "to": "type",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "type",
      "relationship": "calls"
    },
    {
      "from": "Watcher::ignore?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Watcher::removed?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Watcher::removed?",
      "to": "exist?",
      "relationship": "calls"
    },
    {
      "from": "Watcher::removed?",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "Watcher",
      "to": "exist?",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "watch",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "watch",
      "to": "elements",
      "relationship": "calls"
    },
    {
      "from": "watch",
      "to": "watcher_for",
      "relationship": "calls"
    },
    {
      "from": "ignore",
      "to": "ignore",
      "relationship": "calls"
    },
    {
      "from": "ignore",
      "to": "watcher_for",
      "relationship": "calls"
    },
    {
      "from": "watcher_for",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "watcher_for",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "watchers",
      "to": "values",
      "relationship": "calls"
    },
    {
      "from": "updated",
      "to": "find_all",
      "relationship": "calls"
    },
    {
      "from": "updated",
      "to": "watchers",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "update",
      "relationship": "calls"
    },
    {
      "from": "updated?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "updated?",
      "to": "ignore?",
      "relationship": "calls"
    },
    {
      "from": "updated?",
      "to": "removed?",
      "relationship": "calls"
    },
    {
      "from": "updated?",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "updated?",
      "to": "mtime",
      "relationship": "calls"
    },
    {
      "from": "updated?",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "update",
      "to": "mtime",
      "relationship": "calls"
    },
    {
      "from": "update",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "inline_templates?",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "inline_templates?",
      "to": "elements",
      "relationship": "calls"
    },
    {
      "from": "inline_templates?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "inline_templates?",
      "to": "type",
      "relationship": "calls"
    },
    {
      "from": "ignore?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "removed?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "removed?",
      "to": "exist?",
      "relationship": "calls"
    },
    {
      "from": "removed?",
      "to": "path",
      "relationship": "calls"
    },
    {
      "from": "after_reload",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "run!",
      "to": "reloader?",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "source_location",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "watch_element",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "inline_templates=",
      "to": "watch_element",
      "relationship": "calls"
    },
    {
      "from": "use",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "use",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "use",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "use",
      "to": "watch_element",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "source_location",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "watch_element",
      "relationship": "calls"
    },
    {
      "from": "add_filter",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "error",
      "to": "watch_element",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "start_registering_extension",
      "relationship": "calls"
    },
    {
      "from": "register",
      "to": "stop_registering_extension",
      "relationship": "calls"
    },
    {
      "from": "inherited",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "deactivate",
      "to": "type",
      "relationship": "calls"
    },
    {
      "from": "deactivate",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "deactivate",
      "to": "representation",
      "relationship": "calls"
    },
    {
      "from": "deactivate",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "deactivate",
      "to": "routes",
      "relationship": "calls"
    },
    {
      "from": "deactivate",
      "to": "filters",
      "relationship": "calls"
    },
    {
      "from": "deactivate",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "also_reload",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "also_reload",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "also_reload",
      "to": "watch_file",
      "relationship": "calls"
    },
    {
      "from": "also_reload",
      "to": "for",
      "relationship": "calls"
    },
    {
      "from": "dont_reload",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "dont_reload",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "dont_reload",
      "to": "ignore",
      "relationship": "calls"
    },
    {
      "from": "dont_reload",
      "to": "for",
      "relationship": "calls"
    },
    {
      "from": "start_registering_extension",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "start_registering_extension",
      "to": "caller_files",
      "relationship": "calls"
    },
    {
      "from": "registering_extension?",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "registering_extension?",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "registering_extension?",
      "to": "register_path",
      "relationship": "calls"
    },
    {
      "from": "watch_element",
      "to": "for",
      "relationship": "calls"
    },
    {
      "from": "watch_element",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "watch_element",
      "to": "watch",
      "relationship": "calls"
    },
    {
      "from": "watch_element",
      "to": "registering_extension?",
      "relationship": "calls"
    },
    {
      "from": "watch_element",
      "to": "register_path",
      "relationship": "calls"
    },
    {
      "from": "required_params",
      "to": "_required_params",
      "relationship": "calls"
    },
    {
      "from": "required_params",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "_required_params",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "_required_params",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "_required_params",
      "to": "_required_params",
      "relationship": "calls"
    },
    {
      "from": "_required_params",
      "to": "keys",
      "relationship": "calls"
    },
    {
      "from": "_required_params",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "_required_params",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "_required_params",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "_required_params",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "Format::on",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Format::on",
      "to": "mime_types",
      "relationship": "calls"
    },
    {
      "from": "Format::on",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Format::on",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "mime_types",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "keys",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "compact",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Format::finish",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "keys",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "compact",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "Format::method_missing",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Format::method_missing",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Format::method_missing",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Format::method_missing",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "Format::method_missing",
      "to": "on",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "Format",
      "to": "on",
      "relationship": "calls"
    },
    {
      "from": "on",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "on",
      "to": "mime_types",
      "relationship": "calls"
    },
    {
      "from": "on",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "on",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "keys",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "compact",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "finish",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "on",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "on",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "ext_map",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "end_with?",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "template_cache",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "template_for",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "to_hash",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "json",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "finish",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "finish",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "template_engines",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "template_map",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "default_mapping",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "lazy_map",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "find_template",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "views",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "exist?",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "rendering_method",
      "relationship": "calls"
    },
    {
      "from": "template_for",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "remap_extensions",
      "to": "clear",
      "relationship": "calls"
    },
    {
      "from": "remap_extensions",
      "to": "ext_map",
      "relationship": "calls"
    },
    {
      "from": "remap_extensions",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "remap_extensions",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "remap_extensions",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "remap_extensions",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "mime_type",
      "to": "remap_extensions",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "concat",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "rendering_method",
      "to": "method_defined?",
      "relationship": "calls"
    },
    {
      "from": "rendering_method",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "rendering_method",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "compile!",
      "to": "respond_to",
      "relationship": "calls"
    },
    {
      "from": "Runner::app_file",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "Runner::app_file",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "Runner::run",
      "to": "start",
      "relationship": "calls"
    },
    {
      "from": "Runner::run",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "Runner::run",
      "to": "ping",
      "relationship": "calls"
    },
    {
      "from": "Runner::run",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Runner::run",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "Runner::run",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "start",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "ping",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Runner::kill",
      "to": "pipe",
      "relationship": "calls"
    },
    {
      "from": "Runner::kill",
      "to": "kill",
      "relationship": "calls"
    },
    {
      "from": "Runner::kill",
      "to": "pid",
      "relationship": "calls"
    },
    {
      "from": "Runner::kill",
      "to": "system",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "pipe",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "kill",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "pid",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "system",
      "relationship": "calls"
    },
    {
      "from": "Runner::get",
      "to": "timeout",
      "relationship": "calls"
    },
    {
      "from": "Runner::get",
      "to": "get_url",
      "relationship": "calls"
    },
    {
      "from": "Runner::get",
      "to": "protocol",
      "relationship": "calls"
    },
    {
      "from": "Runner::get",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "timeout",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "get_url",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "protocol",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_stream",
      "to": "start",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_stream",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_stream",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_stream",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_stream",
      "to": "read_body",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "read_body",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_response",
      "to": "start",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_response",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_response",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_response",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Runner::log",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "Runner::log",
      "to": "loop",
      "relationship": "calls"
    },
    {
      "from": "Runner::log",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Runner::log",
      "to": "read_nonblock",
      "relationship": "calls"
    },
    {
      "from": "Runner::log",
      "to": "pipe",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "loop",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "read_nonblock",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "attr_accessor",
      "relationship": "calls"
    },
    {
      "from": "Runner::start",
      "to": "popen",
      "relationship": "calls"
    },
    {
      "from": "Runner::start",
      "to": "command",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "popen",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "command",
      "relationship": "calls"
    },
    {
      "from": "Runner::command",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "Runner::command",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": "loop",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": "alive?",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": "command",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": "log",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Runner::ping",
      "to": "sleep",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "alive?",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "log",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "sleep",
      "relationship": "calls"
    },
    {
      "from": "Runner::alive?",
      "to": "times",
      "relationship": "calls"
    },
    {
      "from": "Runner::alive?",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "Runner::alive?",
      "to": "ping_path",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "times",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "ping_path",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_url",
      "to": "parse",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_url",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_url",
      "to": "protocol",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_url",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_url",
      "to": "get_https_url",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "parse",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "get_https_url",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_https_url",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_https_url",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_https_url",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_https_url",
      "to": "use_ssl=",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_https_url",
      "to": "verify_mode=",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_https_url",
      "to": "request_uri",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_https_url",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Runner::get_https_url",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "use_ssl=",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "verify_mode=",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "request_uri",
      "relationship": "calls"
    },
    {
      "from": "Runner",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "app_file",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "app_file",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "start",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "ping",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "kill",
      "to": "pipe",
      "relationship": "calls"
    },
    {
      "from": "kill",
      "to": "kill",
      "relationship": "calls"
    },
    {
      "from": "kill",
      "to": "pid",
      "relationship": "calls"
    },
    {
      "from": "kill",
      "to": "system",
      "relationship": "calls"
    },
    {
      "from": "get",
      "to": "timeout",
      "relationship": "calls"
    },
    {
      "from": "get",
      "to": "get_url",
      "relationship": "calls"
    },
    {
      "from": "get",
      "to": "protocol",
      "relationship": "calls"
    },
    {
      "from": "get",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "get_stream",
      "to": "start",
      "relationship": "calls"
    },
    {
      "from": "get_stream",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "get_stream",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "get_stream",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "get_stream",
      "to": "read_body",
      "relationship": "calls"
    },
    {
      "from": "get_response",
      "to": "start",
      "relationship": "calls"
    },
    {
      "from": "get_response",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "get_response",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "get_response",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "log",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "log",
      "to": "loop",
      "relationship": "calls"
    },
    {
      "from": "log",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "log",
      "to": "read_nonblock",
      "relationship": "calls"
    },
    {
      "from": "log",
      "to": "pipe",
      "relationship": "calls"
    },
    {
      "from": "start",
      "to": "popen",
      "relationship": "calls"
    },
    {
      "from": "start",
      "to": "command",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": "loop",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": "alive?",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": "command",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": "log",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "ping",
      "to": "sleep",
      "relationship": "calls"
    },
    {
      "from": "alive?",
      "to": "times",
      "relationship": "calls"
    },
    {
      "from": "alive?",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "alive?",
      "to": "ping_path",
      "relationship": "calls"
    },
    {
      "from": "get_url",
      "to": "parse",
      "relationship": "calls"
    },
    {
      "from": "get_url",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "get_url",
      "to": "protocol",
      "relationship": "calls"
    },
    {
      "from": "get_url",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "get_url",
      "to": "get_https_url",
      "relationship": "calls"
    },
    {
      "from": "get_https_url",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "get_https_url",
      "to": "host",
      "relationship": "calls"
    },
    {
      "from": "get_https_url",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "get_https_url",
      "to": "use_ssl=",
      "relationship": "calls"
    },
    {
      "from": "get_https_url",
      "to": "verify_mode=",
      "relationship": "calls"
    },
    {
      "from": "get_https_url",
      "to": "request_uri",
      "relationship": "calls"
    },
    {
      "from": "get_https_url",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "get_https_url",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "app=",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "callback",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "<<",
      "to": "closed?",
      "relationship": "calls"
    },
    {
      "from": "<<",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "<<",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "<<",
      "to": "bytesize",
      "relationship": "calls"
    },
    {
      "from": "map",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "map",
      "to": "clone",
      "relationship": "calls"
    },
    {
      "from": "map!",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "map!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "write",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "write",
      "to": "bytesize",
      "relationship": "calls"
    },
    {
      "from": "write",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "print",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "print",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "printf",
      "to": "print",
      "relationship": "calls"
    },
    {
      "from": "printf",
      "to": "%",
      "relationship": "calls"
    },
    {
      "from": "printf",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "putc",
      "to": "print",
      "relationship": "calls"
    },
    {
      "from": "putc",
      "to": "chr",
      "relationship": "calls"
    },
    {
      "from": "puts",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "puts",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "close_read",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "closed_write?",
      "to": "closed?",
      "relationship": "calls"
    },
    {
      "from": "external_encoding",
      "to": "find",
      "relationship": "calls"
    },
    {
      "from": "external_encoding",
      "to": "default_encoding",
      "relationship": "calls"
    },
    {
      "from": "external_encoding",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "settings",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "not_open_for_reading",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "enum_not_open_for_reading",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "enum_not_open_for_reading",
      "to": "not_open_for_reading",
      "relationship": "calls"
    },
    {
      "from": "enum_not_open_for_reading",
      "to": "enum_for",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "app",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "options",
      "to": "env_for",
      "relationship": "calls"
    },
    {
      "from": "options",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "options",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "options",
      "to": "current_session",
      "relationship": "calls"
    },
    {
      "from": "patch",
      "to": "env_for",
      "relationship": "calls"
    },
    {
      "from": "patch",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "patch",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "patch",
      "to": "current_session",
      "relationship": "calls"
    },
    {
      "from": "last_request?",
      "to": "last_request",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "last_request?",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "last_env",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "session",
      "to": "last_request",
      "relationship": "calls"
    },
    {
      "from": "last_env",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "last_env",
      "to": "last_request",
      "relationship": "calls"
    },
    {
      "from": "safe?",
      "to": "_safe?",
      "relationship": "calls"
    },
    {
      "from": "safe?",
      "to": "propfind?",
      "relationship": "calls"
    },
    {
      "from": "idempotent?",
      "to": "_idempotent?",
      "relationship": "calls"
    },
    {
      "from": "idempotent?",
      "to": "propfind?",
      "relationship": "calls"
    },
    {
      "from": "idempotent?",
      "to": "move?",
      "relationship": "calls"
    },
    {
      "from": "idempotent?",
      "to": "unlock?",
      "relationship": "calls"
    },
    {
      "from": "propfind?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "propfind?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "proppatch?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "proppatch?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "mkcol?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "mkcol?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "copy?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "copy?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "move?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "move?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "unlock?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "unlock?",
      "to": "request_method",
      "relationship": "calls"
    },
    {
      "from": "propfind",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "proppatch",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "mkcol",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "copy",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "move",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "unlock",
      "to": "route",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "subject",
      "relationship": "calls"
    },
    {
      "from": "render",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "config_file",
      "to": "config_file",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "last_response",
      "relationship": "calls"
    },
    {
      "from": "cookie_route",
      "to": "set_cookie",
      "relationship": "calls"
    },
    {
      "from": "cookie_route",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "cookie_route",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "cookie_route",
      "to": "to",
      "relationship": "calls"
    },
    {
      "from": "cookie_route",
      "to": "expect",
      "relationship": "calls"
    },
    {
      "from": "cookie_route",
      "to": "last_response",
      "relationship": "calls"
    },
    {
      "from": "cookie_route",
      "to": "be_ok",
      "relationship": "calls"
    },
    {
      "from": "cookie_route",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "cookie_route",
      "to": "eq",
      "relationship": "calls"
    },
    {
      "from": "cookies",
      "to": "cookie_route",
      "relationship": "calls"
    },
    {
      "from": "cookies",
      "to": "cookies",
      "relationship": "calls"
    },
    {
      "from": "results_in",
      "to": "to",
      "relationship": "calls"
    },
    {
      "from": "results_in",
      "to": "expect",
      "relationship": "calls"
    },
    {
      "from": "results_in",
      "to": "decode",
      "relationship": "calls"
    },
    {
      "from": "results_in",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "results_in",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "results_in",
      "to": "eq",
      "relationship": "calls"
    },
    {
      "from": "mock_app",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "namespace",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "namespace",
      "to": "namespace",
      "relationship": "calls"
    },
    {
      "from": "magic",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "dump_args",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "decode",
      "to": "lex",
      "relationship": "calls"
    },
    {
      "from": "decode",
      "to": "textparse",
      "relationship": "calls"
    },
    {
      "from": "decode",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "decode",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "decode",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "textparse",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "textparse",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "textparse",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "textparse",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "textparse",
      "to": "objparse",
      "relationship": "calls"
    },
    {
      "from": "textparse",
      "to": "arrparse",
      "relationship": "calls"
    },
    {
      "from": "textparse",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "valparse",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "valparse",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "valparse",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "valparse",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "valparse",
      "to": "objparse",
      "relationship": "calls"
    },
    {
      "from": "valparse",
      "to": "arrparse",
      "relationship": "calls"
    },
    {
      "from": "valparse",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "objparse",
      "to": "eat",
      "relationship": "calls"
    },
    {
      "from": "objparse",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "objparse",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "objparse",
      "to": "pairparse",
      "relationship": "calls"
    },
    {
      "from": "objparse",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "objparse",
      "to": "loop",
      "relationship": "calls"
    },
    {
      "from": "pairparse",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "pairparse",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "pairparse",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "pairparse",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "pairparse",
      "to": "eat",
      "relationship": "calls"
    },
    {
      "from": "pairparse",
      "to": "valparse",
      "relationship": "calls"
    },
    {
      "from": "arrparse",
      "to": "eat",
      "relationship": "calls"
    },
    {
      "from": "arrparse",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "arrparse",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "arrparse",
      "to": "valparse",
      "relationship": "calls"
    },
    {
      "from": "arrparse",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "arrparse",
      "to": "loop",
      "relationship": "calls"
    },
    {
      "from": "eat",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "eat",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "eat",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "eat",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "lex",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "lex",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "lex",
      "to": "tok",
      "relationship": "calls"
    },
    {
      "from": "lex",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "lex",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "lex",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "lex",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "lex",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "lex",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "tok",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "tok",
      "to": "nulltok",
      "relationship": "calls"
    },
    {
      "from": "tok",
      "to": "truetok",
      "relationship": "calls"
    },
    {
      "from": "tok",
      "to": "falsetok",
      "relationship": "calls"
    },
    {
      "from": "tok",
      "to": "strtok",
      "relationship": "calls"
    },
    {
      "from": "tok",
      "to": "numtok",
      "relationship": "calls"
    },
    {
      "from": "nulltok",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "nulltok",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "truetok",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "truetok",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "falsetok",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "falsetok",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "numtok",
      "to": "match",
      "relationship": "calls"
    },
    {
      "from": "numtok",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "numtok",
      "to": "begin",
      "relationship": "calls"
    },
    {
      "from": "numtok",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "numtok",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "numtok",
      "to": "*",
      "relationship": "calls"
    },
    {
      "from": "numtok",
      "to": "Integer",
      "relationship": "calls"
    },
    {
      "from": "numtok",
      "to": "**",
      "relationship": "calls"
    },
    {
      "from": "numtok",
      "to": "Float",
      "relationship": "calls"
    },
    {
      "from": "strtok",
      "to": "match",
      "relationship": "calls"
    },
    {
      "from": "strtok",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "strtok",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "strtok",
      "to": "abbrev",
      "relationship": "calls"
    },
    {
      "from": "strtok",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "strtok",
      "to": "unquote",
      "relationship": "calls"
    },
    {
      "from": "abbrev",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "abbrev",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "abbrev",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "abbrev",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "dup",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": ">=",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "hexdec4",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "surrogate?",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "subst",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "unquote",
      "to": "ucharenc",
      "relationship": "calls"
    },
    {
      "from": "ucharenc",
      "to": "<=",
      "relationship": "calls"
    },
    {
      "from": "ucharenc",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "ucharenc",
      "to": "chr",
      "relationship": "calls"
    },
    {
      "from": "ucharenc",
      "to": "&",
      "relationship": "calls"
    },
    {
      "from": "ucharenc",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "ucharenc",
      "to": "|",
      "relationship": "calls"
    },
    {
      "from": "ucharenc",
      "to": ">>",
      "relationship": "calls"
    },
    {
      "from": "hexdec4",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "hexdec4",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "hexdec4",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "hexdec4",
      "to": "|",
      "relationship": "calls"
    },
    {
      "from": "hexdec4",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "hexdec4",
      "to": "nibble",
      "relationship": "calls"
    },
    {
      "from": "hexdec4",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "subst",
      "to": "<=",
      "relationship": "calls"
    },
    {
      "from": "subst",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "subst",
      "to": "|",
      "relationship": "calls"
    },
    {
      "from": "subst",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "subst",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "subst",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "unsubst",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "unsubst",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "unsubst",
      "to": "surrogate?",
      "relationship": "calls"
    },
    {
      "from": "unsubst",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "unsubst",
      "to": "&",
      "relationship": "calls"
    },
    {
      "from": "unsubst",
      "to": ">>",
      "relationship": "calls"
    },
    {
      "from": "surrogate?",
      "to": "<=",
      "relationship": "calls"
    },
    {
      "from": "surrogate?",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "nibble",
      "to": "<=",
      "relationship": "calls"
    },
    {
      "from": "nibble",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "nibble",
      "to": "ord",
      "relationship": "calls"
    },
    {
      "from": "nibble",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "nibble",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "encode",
      "to": "objenc",
      "relationship": "calls"
    },
    {
      "from": "encode",
      "to": "arrenc",
      "relationship": "calls"
    },
    {
      "from": "encode",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "valenc",
      "to": "objenc",
      "relationship": "calls"
    },
    {
      "from": "valenc",
      "to": "arrenc",
      "relationship": "calls"
    },
    {
      "from": "valenc",
      "to": "strenc",
      "relationship": "calls"
    },
    {
      "from": "valenc",
      "to": "numenc",
      "relationship": "calls"
    },
    {
      "from": "valenc",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "valenc",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "valenc",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "objenc",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "objenc",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "objenc",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "objenc",
      "to": "keyenc",
      "relationship": "calls"
    },
    {
      "from": "objenc",
      "to": "valenc",
      "relationship": "calls"
    },
    {
      "from": "arrenc",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "arrenc",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "arrenc",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "arrenc",
      "to": "valenc",
      "relationship": "calls"
    },
    {
      "from": "keyenc",
      "to": "strenc",
      "relationship": "calls"
    },
    {
      "from": "keyenc",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "keyenc",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "putc",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "print",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "<=",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "uchardec",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "hexenc4",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "unsubst",
      "relationship": "calls"
    },
    {
      "from": "strenc",
      "to": "string",
      "relationship": "calls"
    },
    {
      "from": "hexenc4",
      "to": "putc",
      "relationship": "calls"
    },
    {
      "from": "hexenc4",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "hexenc4",
      "to": "&",
      "relationship": "calls"
    },
    {
      "from": "hexenc4",
      "to": ">>",
      "relationship": "calls"
    },
    {
      "from": "numenc",
      "to": "nan?",
      "relationship": "calls"
    },
    {
      "from": "numenc",
      "to": "infinite?",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "ord",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "<=",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "|",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "uchardec",
      "to": "&",
      "relationship": "calls"
    },
    {
      "from": "tmp_dir",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "tmp_dir",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "app_file_path",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "app_file_path",
      "to": "tmp_dir",
      "relationship": "calls"
    },
    {
      "from": "app_const",
      "to": "const_get",
      "relationship": "calls"
    },
    {
      "from": "app_const",
      "to": "app_name",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "app_name",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "update_file",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "app_file_path",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "write",
      "relationship": "calls"
    },
    {
      "from": "write_app_file",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "update_file",
      "to": "exist?",
      "relationship": "calls"
    },
    {
      "from": "update_file",
      "to": "mtime",
      "relationship": "calls"
    },
    {
      "from": "update_file",
      "to": "at",
      "relationship": "calls"
    },
    {
      "from": "update_file",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "update_file",
      "to": "open",
      "relationship": "calls"
    },
    {
      "from": "update_file",
      "to": "utime",
      "relationship": "calls"
    },
    {
      "from": "setup_example_app",
      "to": "mkdir_p",
      "relationship": "calls"
    },
    {
      "from": "setup_example_app",
      "to": "tmp_dir",
      "relationship": "calls"
    },
    {
      "from": "setup_example_app",
      "to": "write_app_file",
      "relationship": "calls"
    },
    {
      "from": "setup_example_app",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "setup_example_app",
      "to": "app_file_path",
      "relationship": "calls"
    },
    {
      "from": "setup_example_app",
      "to": "require",
      "relationship": "calls"
    },
    {
      "from": "setup_example_app",
      "to": "app=",
      "relationship": "calls"
    },
    {
      "from": "setup_example_app",
      "to": "app_const",
      "relationship": "calls"
    },
    {
      "from": "setup_example_app",
      "to": "enable",
      "relationship": "calls"
    },
    {
      "from": "Parent",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "Parent",
      "to": "enable",
      "relationship": "calls"
    },
    {
      "from": "respond_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "respond_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "respond_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "respond_app",
      "to": "root",
      "relationship": "calls"
    },
    {
      "from": "respond_app",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "respond_app",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "respond_app",
      "relationship": "calls"
    },
    {
      "from": "respond_to",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "respond_app",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "respond_with",
      "to": "respond_with",
      "relationship": "calls"
    },
    {
      "from": "req",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "req",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "req",
      "to": "start_with?",
      "relationship": "calls"
    },
    {
      "from": "req",
      "to": "shift",
      "relationship": "calls"
    },
    {
      "from": "req",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "req",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "req",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "req",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "req",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "helpers",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "stream",
      "to": "stream",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "map!",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest::asciidoc_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest::asciidoc_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest::asciidoc_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest::asciidoc_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest::asciidoc_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "asciidoc_app",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "asciidoc",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "assert_match",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "assert_include",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "AsciidoctorTest",
      "to": "erb",
      "relationship": "calls"
    },
    {
      "from": "asciidoc_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "asciidoc_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "asciidoc_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "asciidoc_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "asciidoc_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "describe",
      "relationship": "calls"
    },
    {
      "from": "TestApp",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "TestKeywordArgumentInitializerApp",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "included_modules",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "times",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "configure",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "helpers",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "lambda",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "new!",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "assert_same",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware::route_missing",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware::route_missing",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "BaseTest::route_missing",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "BaseTest::route_missing",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "forward",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestMiddleware",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "forward",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestMiddlewareContentLength",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "route_missing",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "route_missing",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest::builder_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest::builder_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest::builder_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest::builder_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest::builder_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "builder_app",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "builder",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "couple",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "BuilderTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "builder_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "builder_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "builder_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "builder_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "builder_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "fail",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "match",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "parses",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "fails",
      "relationship": "calls"
    },
    {
      "from": "CompileTest",
      "to": "raises",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "setup_blocks",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "teardown_blocks",
      "relationship": "calls"
    },
    {
      "from": "Test::setup_blocks",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Test::setup_blocks",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Test::setup_blocks",
      "to": "setup_blocks",
      "relationship": "calls"
    },
    {
      "from": "Test::setup_blocks",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Test::setup_blocks",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "Test::teardown_blocks",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Test::teardown_blocks",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "Test::teardown_blocks",
      "to": "teardown_blocks",
      "relationship": "calls"
    },
    {
      "from": "Test::teardown_blocks",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "Test::teardown_blocks",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "remove_tests",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "block_given?",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "const_set",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "context_name",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "define_method",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "test_name",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "alias_method",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "sanitize_name",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "tr",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "method_defined?",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "succ",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "grep",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "public_instance_methods",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "setup_blocks",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "setup_blocks",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "setup_blocks",
      "to": "setup_blocks",
      "relationship": "calls"
    },
    {
      "from": "setup_blocks",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "setup_blocks",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "teardown_blocks",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "teardown_blocks",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "teardown_blocks",
      "to": "teardown_blocks",
      "relationship": "calls"
    },
    {
      "from": "teardown_blocks",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "teardown_blocks",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "Mirror",
      "to": "attr_reader",
      "relationship": "calls"
    },
    {
      "from": "Mirror::method_missing",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "Mirror::method_missing",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Mirror",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "Mirror",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "attr_reader",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::method_missing",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::method_missing",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "mirror",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "last_call",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "target",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::teardown",
      "to": "target=",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "target=",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::delegation_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::delegation_app",
      "to": "target=",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::delegation_app",
      "to": "delegate",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "delegate",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::mirror",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::mirror",
      "to": "target=",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::mirror",
      "to": "delegate",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::delegate",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::delegate",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::delegate",
      "to": "target",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::delegate",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::delegate",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::delegate",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::target",
      "to": "target",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "delegation_app",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "head",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "before",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "helpers",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::respond_to?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::respond_to?",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::method_missing",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest::method_missing",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "DelegatorTest",
      "to": "delegates",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "teardown",
      "to": "target=",
      "relationship": "calls"
    },
    {
      "from": "delegation_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "delegation_app",
      "to": "target=",
      "relationship": "calls"
    },
    {
      "from": "delegation_app",
      "to": "delegate",
      "relationship": "calls"
    },
    {
      "from": "mirror",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "mirror",
      "to": "target=",
      "relationship": "calls"
    },
    {
      "from": "mirror",
      "to": "delegate",
      "relationship": "calls"
    },
    {
      "from": "delegate",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "delegate",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "delegate",
      "to": "target",
      "relationship": "calls"
    },
    {
      "from": "delegate",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "delegate",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "delegate",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "target",
      "to": "target",
      "relationship": "calls"
    },
    {
      "from": "respond_to?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "respond_to?",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "erb",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "encode",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "BaseTest",
      "to": "views",
      "relationship": "calls"
    },
    {
      "from": "ERBTest::setup",
      "to": "prefer",
      "relationship": "calls"
    },
    {
      "from": "ERBTest::setup",
      "to": "engine",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "prefer",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "engine",
      "relationship": "calls"
    },
    {
      "from": "ERBTest::erb_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "ERBTest::erb_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "ERBTest::erb_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "ERBTest::erb_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "ERBTest::erb_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "erb_app",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "erb",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "ERBTest::container",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "ERBTest",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "setup",
      "to": "prefer",
      "relationship": "calls"
    },
    {
      "from": "setup",
      "to": "engine",
      "relationship": "calls"
    },
    {
      "from": "erb_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "erb_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "erb_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "erb_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "erb_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "container",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "private_instance_methods",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest::bizzle",
      "to": "bizzle_option",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "bizzle_option",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "fail",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "ExtensionsTest",
      "to": "bizzle",
      "relationship": "calls"
    },
    {
      "from": "bizzle",
      "to": "bizzle_option",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "before",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "path_info=",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "redirect",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "fail",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "redirect?",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "basename",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "error",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "BeforeFilterTest",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "before",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "after",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "redirect",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "redirect?",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "to_json",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "basename",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "path_info=",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "error",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "message",
      "relationship": "calls"
    },
    {
      "from": "AfterFilterTest",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest::haml_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest::haml_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest::haml_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest::haml_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest::haml_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "haml_app",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "haml",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "assert_match",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "HAMLTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "haml_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "haml_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "haml_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "haml_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "haml_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::test_default",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::status_app",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::status_app",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::status_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::status_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::status_app",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::status_app",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::status_app",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "describe",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "status_app",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "bad_request?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "not_found?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "rand",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "informational?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "success?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "redirect?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "client_error?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "server_error?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "after",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "redirect",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "fail",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "back",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "post",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "parse",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "error",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "disable",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "not_found",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "before",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "dump",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "session",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "enable",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "follow_redirect!",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "session_secret",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "silence_warnings",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "include",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "test",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "add_charset",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "assert_match",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::attachment_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::attachment_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::attachment_app",
      "to": "attachment",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::attachment_app",
      "to": "write",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::attachment_app",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "attachment",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "write",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "attachment_app",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "open",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::teardown",
      "to": "unlink",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "unlink",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::send_file_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::send_file_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest::send_file_app",
      "to": "send_file",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "send_file",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "send_file_app",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "httpdate",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "mtime",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "now",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "assert_status",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "cache_control",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "expires",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "at",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "refute_nil",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "last_modified",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "today",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "to_i",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "time_for",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "context",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "etag",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "put",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "location",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "uri",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "url",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "to",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "info",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "logger",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "string",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "helpers",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "one",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "two",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "foo",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "alias_method",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "h",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "skip",
      "relationship": "calls"
    },
    {
      "from": "HelpersOverloadingIncludeAndOverride",
      "to": "helpers",
      "relationship": "calls"
    },
    {
      "from": "HelpersOverloadingIncludeAndOverride",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "HelpersOverloadingIncludeAndOverride",
      "to": "my_test",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "my_test",
      "relationship": "calls"
    },
    {
      "from": "ServerApp",
      "to": "helpers",
      "relationship": "calls"
    },
    {
      "from": "HelpersTest",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "test_default",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "status_app",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "status_app",
      "to": "proc",
      "relationship": "calls"
    },
    {
      "from": "status_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "status_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "status_app",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "status_app",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "status_app",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "attachment_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "attachment_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "attachment_app",
      "to": "attachment",
      "relationship": "calls"
    },
    {
      "from": "attachment_app",
      "to": "write",
      "relationship": "calls"
    },
    {
      "from": "attachment_app",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "teardown",
      "to": "unlink",
      "relationship": "calls"
    },
    {
      "from": "send_file_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "send_file_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "send_file_app",
      "to": "send_file",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_flattened_constructor",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_flattened_constructor",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_pairs_constructor",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_pairs_constructor",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_block",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_block",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_block",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_block",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_block",
      "to": "default",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_block",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics",
      "to": "default",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_object",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_object",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_object",
      "to": "default",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_object",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_assignment",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_assignment",
      "to": "default=",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_assignment",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_assignment",
      "to": "default",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_default_assignment",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics",
      "to": "default=",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_assignment",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_assignment",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_assignment",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_assignment",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_assignment",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_merge!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_merge!",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics::test_merge!",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHashBasics",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "test_flattened_constructor",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_flattened_constructor",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_pairs_constructor",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_pairs_constructor",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_default_block",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "test_default_block",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "test_default_block",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "test_default_block",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "test_default_block",
      "to": "default",
      "relationship": "calls"
    },
    {
      "from": "test_default_block",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_default_object",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "test_default_object",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_default_object",
      "to": "default",
      "relationship": "calls"
    },
    {
      "from": "test_default_object",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_default_assignment",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "test_default_assignment",
      "to": "default=",
      "relationship": "calls"
    },
    {
      "from": "test_default_assignment",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_default_assignment",
      "to": "default",
      "relationship": "calls"
    },
    {
      "from": "test_default_assignment",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_assignment",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "test_assignment",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "test_assignment",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_assignment",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_assignment",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "test_merge!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_merge!",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "test_merge!",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::setup",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_hash_constructor",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_hash_constructor",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_hash_constructor",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_assoc",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_assoc",
      "to": "assoc",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_assoc",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "assoc",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_rassoc",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_rassoc",
      "to": "rassoc",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_rassoc",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "rassoc",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_fetch",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_fetch",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_fetch",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_symbolic_retrieval",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_symbolic_retrieval",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_symbolic_retrieval",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_key",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_key",
      "to": "key",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_key",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "key",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_key?",
      "to": "assert_operator",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_key?",
      "to": "refute_operator",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "assert_operator",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "refute_operator",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_value?",
      "to": "assert_operator",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_value?",
      "to": "refute_operator",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_delete",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_delete",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_delete",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_dig",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_dig",
      "to": "dig",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_dig",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "dig",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_slice",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_slice",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_slice",
      "to": "slice",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_slice",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "slice",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_fetch_values",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_fetch_values",
      "to": "fetch_values",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_fetch_values",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_fetch_values",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "fetch_values",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_values_at",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_values_at",
      "to": "values_at",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "values_at",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_merge",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_merge",
      "to": "refute_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_merge",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_merge",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "refute_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_merge_with_multiple_argument",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_merge_with_multiple_argument",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_merge_with_multiple_argument",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_merge_with_multiple_argument",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_merge_with_multiple_argument",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_replace",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_replace",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values!",
      "to": "transform_values!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values!",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values!",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values!",
      "to": "assert_instance_of",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "transform_values!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "assert_instance_of",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values",
      "to": "transform_values",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values",
      "to": "refute_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_values",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "transform_values",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys!",
      "to": "transform_keys!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys!",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys!",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "transform_keys!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys",
      "to": "transform_keys",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys",
      "to": "refute_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys",
      "to": "refute_operator",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_transform_keys",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "transform_keys",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_select",
      "to": "select",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_select",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_select",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_select",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_select",
      "to": "assert_instance_of",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "select",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_select!",
      "to": "select!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_select!",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_select!",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_select!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "select!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_reject",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_reject",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_reject",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_reject",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_reject",
      "to": "assert_instance_of",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_reject!",
      "to": "reject!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_reject!",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_reject!",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_reject!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "reject!",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_compact",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_compact",
      "to": "compact",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_compact",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_compact",
      "to": "assert_instance_of",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_compact",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_compact",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "compact",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": ">=",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_except",
      "to": "except",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_except",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash::test_except",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TestIndifferentHash",
      "to": "except",
      "relationship": "calls"
    },
    {
      "from": "setup",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_hash_constructor",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_hash_constructor",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_hash_constructor",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "test_assoc",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "test_assoc",
      "to": "assoc",
      "relationship": "calls"
    },
    {
      "from": "test_assoc",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_rassoc",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "test_rassoc",
      "to": "rassoc",
      "relationship": "calls"
    },
    {
      "from": "test_rassoc",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_fetch",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "test_fetch",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "test_fetch",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_symbolic_retrieval",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_symbolic_retrieval",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_symbolic_retrieval",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "test_key",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "test_key",
      "to": "key",
      "relationship": "calls"
    },
    {
      "from": "test_key",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_key?",
      "to": "assert_operator",
      "relationship": "calls"
    },
    {
      "from": "test_key?",
      "to": "refute_operator",
      "relationship": "calls"
    },
    {
      "from": "test_value?",
      "to": "assert_operator",
      "relationship": "calls"
    },
    {
      "from": "test_value?",
      "to": "refute_operator",
      "relationship": "calls"
    },
    {
      "from": "test_delete",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "test_delete",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "test_delete",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_dig",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_dig",
      "to": "dig",
      "relationship": "calls"
    },
    {
      "from": "test_dig",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "test_slice",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_slice",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_slice",
      "to": "slice",
      "relationship": "calls"
    },
    {
      "from": "test_slice",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "test_fetch_values",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "test_fetch_values",
      "to": "fetch_values",
      "relationship": "calls"
    },
    {
      "from": "test_fetch_values",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_fetch_values",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "test_values_at",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_values_at",
      "to": "values_at",
      "relationship": "calls"
    },
    {
      "from": "test_merge",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "test_merge",
      "to": "refute_equal",
      "relationship": "calls"
    },
    {
      "from": "test_merge",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_merge",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_merge_with_multiple_argument",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "test_merge_with_multiple_argument",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "test_merge_with_multiple_argument",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_merge_with_multiple_argument",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_merge_with_multiple_argument",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "test_replace",
      "to": "replace",
      "relationship": "calls"
    },
    {
      "from": "test_replace",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values!",
      "to": "transform_values!",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values!",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values!",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values!",
      "to": "assert_instance_of",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values",
      "to": "transform_values",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values",
      "to": "refute_equal",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_transform_values",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys!",
      "to": "transform_keys!",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys!",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys!",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys!",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys",
      "to": "transform_keys",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys",
      "to": "refute_equal",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys",
      "to": "refute_operator",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_transform_keys",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_select",
      "to": "select",
      "relationship": "calls"
    },
    {
      "from": "test_select",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "test_select",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_select",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_select",
      "to": "assert_instance_of",
      "relationship": "calls"
    },
    {
      "from": "test_select!",
      "to": "select!",
      "relationship": "calls"
    },
    {
      "from": "test_select!",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "test_select!",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_select!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_reject",
      "to": "reject",
      "relationship": "calls"
    },
    {
      "from": "test_reject",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "test_reject",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_reject",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_reject",
      "to": "assert_instance_of",
      "relationship": "calls"
    },
    {
      "from": "test_reject!",
      "to": "reject!",
      "relationship": "calls"
    },
    {
      "from": "test_reject!",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "test_reject!",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_reject!",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_compact",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "test_compact",
      "to": "compact",
      "relationship": "calls"
    },
    {
      "from": "test_compact",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_compact",
      "to": "assert_instance_of",
      "relationship": "calls"
    },
    {
      "from": "test_compact",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "test_compact",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_except",
      "to": "except",
      "relationship": "calls"
    },
    {
      "from": "test_except",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "test_except",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "stream",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "out=",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "sleep",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "out",
      "relationship": "calls"
    },
    {
      "from": "Subclass",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "it",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "it",
      "to": "all_async",
      "relationship": "calls"
    },
    {
      "from": "it",
      "to": "installed?",
      "relationship": "calls"
    },
    {
      "from": "it",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "it",
      "to": "run_test",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "attr_accessor",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "timeout",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "get_stream",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "IntegrationAsyncTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "attr_accessor",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "all",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::app_file",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::app_file",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::initialize",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::initialize",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::initialize",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::initialize",
      "to": "all_async",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::initialize",
      "to": "all",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "all_async",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run",
      "to": "installed?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run",
      "to": "kill",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run",
      "to": "at_exit",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "installed?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "kill",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "at_exit",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::installed?",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::installed?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::installed?",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::installed?",
      "to": "require",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::installed?",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "require",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "ruby",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "values_at",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "net_http_server?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::command",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "ruby",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "values_at",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "net_http_server?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::webrick?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::webrick?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::webrick?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::puma?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::puma?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::puma?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::falcon?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::falcon?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::falcon?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::trinidad?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::trinidad?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::trinidad?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::net_http_server?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::net_http_server?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::net_http_server?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::warnings",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::warnings",
      "to": "log",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "log",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run_test",
      "to": "server=",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run_test",
      "to": "alive?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run_test",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run_test",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run_test",
      "to": "kill",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run_test",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "BaseServer::run_test",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "server=",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "alive?",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "BaseServer",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "all_async",
      "relationship": "calls"
    },
    {
      "from": "initialize",
      "to": "all",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "installed?",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "kill",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "run",
      "to": "at_exit",
      "relationship": "calls"
    },
    {
      "from": "installed?",
      "to": "nil?",
      "relationship": "calls"
    },
    {
      "from": "installed?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "installed?",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "installed?",
      "to": "require",
      "relationship": "calls"
    },
    {
      "from": "installed?",
      "to": "warn",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "ruby",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "values_at",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "net_http_server?",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "command",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "webrick?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "webrick?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "webrick?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "puma?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "puma?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "puma?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "falcon?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "falcon?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "falcon?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "trinidad?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "trinidad?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "trinidad?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "net_http_server?",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "net_http_server?",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "net_http_server?",
      "to": "name",
      "relationship": "calls"
    },
    {
      "from": "warnings",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "warnings",
      "to": "log",
      "relationship": "calls"
    },
    {
      "from": "run_test",
      "to": "server=",
      "relationship": "calls"
    },
    {
      "from": "run_test",
      "to": "alive?",
      "relationship": "calls"
    },
    {
      "from": "run_test",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "run_test",
      "to": "instance_eval",
      "relationship": "calls"
    },
    {
      "from": "run_test",
      "to": "kill",
      "relationship": "calls"
    },
    {
      "from": "run_test",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "run_test",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "build",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "leader=",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "merge!",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "pipe",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "stdout=",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "io",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "stderr=",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "start",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "debug_all?",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "echo_output",
      "relationship": "calls"
    },
    {
      "from": "with_process",
      "to": "stop",
      "relationship": "calls"
    },
    {
      "from": "echo_output",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "echo_output",
      "to": "loop",
      "relationship": "calls"
    },
    {
      "from": "echo_output",
      "to": "print",
      "relationship": "calls"
    },
    {
      "from": "echo_output",
      "to": "readpartial",
      "relationship": "calls"
    },
    {
      "from": "debug_all?",
      "to": "key?",
      "relationship": "calls"
    },
    {
      "from": "wait_for_output",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "wait_for_output",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "wait_for_output",
      "to": "expect",
      "relationship": "calls"
    },
    {
      "from": "wait_for_output",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "wait_for_output",
      "to": "source",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "include",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_app_start_without_rackup",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_app_start_without_rackup",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_app_start_without_rackup",
      "to": "skip",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_app_start_without_rackup",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_app_start_without_rackup",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_app_start_without_rackup",
      "to": "command_for",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_app_start_without_rackup",
      "to": "with_process",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_app_start_without_rackup",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_app_start_without_rackup",
      "to": "wait_for_output",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "skip",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "command_for",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "with_process",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest",
      "to": "wait_for_output",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_start",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_start",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_start",
      "to": "command_for",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_start",
      "to": "with_process",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_start",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_start",
      "to": "wait_for_output",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_with_zeitwerk",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_with_zeitwerk",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_with_zeitwerk",
      "to": "command_for",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_with_zeitwerk",
      "to": "with_process",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_with_zeitwerk",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "IntegrationStartTest::test_classic_app_with_zeitwerk",
      "to": "wait_for_output",
      "relationship": "calls"
    },
    {
      "from": "test_app_start_without_rackup",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "test_app_start_without_rackup",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "test_app_start_without_rackup",
      "to": "skip",
      "relationship": "calls"
    },
    {
      "from": "test_app_start_without_rackup",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "test_app_start_without_rackup",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "test_app_start_without_rackup",
      "to": "command_for",
      "relationship": "calls"
    },
    {
      "from": "test_app_start_without_rackup",
      "to": "with_process",
      "relationship": "calls"
    },
    {
      "from": "test_app_start_without_rackup",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "test_app_start_without_rackup",
      "to": "wait_for_output",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_start",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_start",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_start",
      "to": "command_for",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_start",
      "to": "with_process",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_start",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_start",
      "to": "wait_for_output",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_with_zeitwerk",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_with_zeitwerk",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_with_zeitwerk",
      "to": "command_for",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_with_zeitwerk",
      "to": "with_process",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_with_zeitwerk",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "test_classic_app_with_zeitwerk",
      "to": "wait_for_output",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "attr_accessor",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "puma?",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "falcon?",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "%",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "rand",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "**",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "count",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "scan",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "log",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "net_http_server?",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "webrick?",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "trinidad?",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "clock_gettime",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "get_stream",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "round",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "assert_operator",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "assert_match",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "warnings",
      "relationship": "calls"
    },
    {
      "from": "IntegrationTest",
      "to": "get_response",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest::liquid_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest::liquid_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest::liquid_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest::liquid_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest::liquid_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "liquid_app",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "liquid",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "LiquidTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "liquid_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "liquid_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "liquid_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "liquid_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "liquid_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest::test_default",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "describe",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "error",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "kind_of?",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "not_found",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "pass",
      "relationship": "calls"
    },
    {
      "from": "MappedErrorTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest::markaby_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest::markaby_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest::markaby_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest::markaby_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest::markaby_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "markaby_app",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "markaby",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "h1",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "em",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "text",
      "relationship": "calls"
    },
    {
      "from": "MarkabyTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "markaby_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "markaby_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "markaby_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "markaby_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "markaby_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "markdown_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "markdown_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "markdown_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "markdown_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "markdown_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "last",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware::call",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware::call",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware::call",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware::call",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "MockMiddleware",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "UpcaseMiddleware::call",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "UpcaseMiddleware::call",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "UpcaseMiddleware::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "UpcaseMiddleware",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "UpcaseMiddleware",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "UpcaseMiddleware",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "DowncaseMiddleware::call",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "DowncaseMiddleware::call",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "DowncaseMiddleware::call",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "DowncaseMiddleware",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "DowncaseMiddleware",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "DowncaseMiddleware",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "FreezeMiddleware::call",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "FreezeMiddleware::call",
      "to": "update_param",
      "relationship": "calls"
    },
    {
      "from": "FreezeMiddleware::call",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "FreezeMiddleware",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "FreezeMiddleware",
      "to": "update_param",
      "relationship": "calls"
    },
    {
      "from": "FreezeMiddleware",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "update_param",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "update_param",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "SpecialConstsMiddleware::call",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "SpecialConstsMiddleware::call",
      "to": "update_param",
      "relationship": "calls"
    },
    {
      "from": "SpecialConstsMiddleware::call",
      "to": "to_c",
      "relationship": "calls"
    },
    {
      "from": "SpecialConstsMiddleware",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "SpecialConstsMiddleware",
      "to": "update_param",
      "relationship": "calls"
    },
    {
      "from": "SpecialConstsMiddleware",
      "to": "to_c",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest::call",
      "to": "to_c",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTest",
      "to": "to_c",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "update_param",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "freeze",
      "relationship": "calls"
    },
    {
      "from": "call",
      "to": "to_c",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest::nokogiri_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest::nokogiri_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest::nokogiri_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest::nokogiri_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest::nokogiri_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "nokogiri_app",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "nokogiri",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "couple",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "<=",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "NokogiriTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "nokogiri_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "nokogiri_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "nokogiri_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "nokogiri_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "nokogiri_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RablTest::rabl_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "RablTest::rabl_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "RablTest::rabl_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "RablTest::rabl_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "RablTest::rabl_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "rabl_app",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "rabl",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "RablTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "rabl_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "rabl_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "rabl_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "rabl_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "rabl_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RackTest::build",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "RackTest::build",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "RackTest::build",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "RackTest::build",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "RackTest::build",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "RackTest::check",
      "to": "build",
      "relationship": "calls"
    },
    {
      "from": "RackTest::check",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "RackTest::check",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "RackTest::check",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RackTest::check",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "build",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "enable",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "check",
      "relationship": "calls"
    },
    {
      "from": "RackTest",
      "to": "disable",
      "relationship": "calls"
    },
    {
      "from": "build",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "build",
      "to": "app",
      "relationship": "calls"
    },
    {
      "from": "build",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "build",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "check",
      "to": "build",
      "relationship": "calls"
    },
    {
      "from": "check",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "check",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "check",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "check",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "RdocTest::rdoc_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "RdocTest::rdoc_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "RdocTest::rdoc_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "RdocTest::rdoc_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "RdocTest::rdoc_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "rdoc_app",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "rdoc",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "assert_like",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "RdocTest",
      "to": "erb",
      "relationship": "calls"
    },
    {
      "from": "rdoc_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "rdoc_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "rdoc_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "rdoc_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "rdoc_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "example",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "section",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "post",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "put",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "patch",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "delete",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "options",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "link",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "unlink",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "ReadmeTest",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "user_agent",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "secure?",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "dump",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "load",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "preferred_type",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "accept?",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "to_str",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "split",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "instance_methods",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "RequestTest",
      "to": "accept",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest::assert_same_body",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest::assert_same_body",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest::assert_same_body",
      "to": "to_enum",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "to_enum",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "body=",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "write",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "status=",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "finish",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "assert_same_body",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "fail",
      "relationship": "calls"
    },
    {
      "from": "ResponseTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "assert_same_body",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "assert_same_body",
      "to": "to_a",
      "relationship": "calls"
    },
    {
      "from": "assert_same_body",
      "to": "to_enum",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "lambda",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "ResultTest",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "clear",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "routes",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "procs",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "class_eval",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "post",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "assert_kind_of",
      "relationship": "calls"
    },
    {
      "from": "RouteAddedHookTest",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "route_def",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "route_def",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "PatternLookAlike::params",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "PatternLookAlike",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "params",
      "to": "+@",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "upcase",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "head",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "bad_request?",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "disable",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "before",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "error",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "not_found",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "user_agent",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "has_key?",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "fetch",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "sort",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "keys",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "encoding",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "kind_of?",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "not_found?",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "route_def",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "assert_predicate",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "after",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "assert_status",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "pass",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "host_name",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "match",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "configure",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "mime_type",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest::protect",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest::protect",
      "to": "authorize",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest::protect",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest::protect",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest::protect",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "authorize",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "helpers",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest::authorize",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "forbidden?",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "run",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "to_app",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "post",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "routes",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "class",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "RoutingTest",
      "to": "refute_equal",
      "relationship": "calls"
    },
    {
      "from": "protect",
      "to": "condition",
      "relationship": "calls"
    },
    {
      "from": "protect",
      "to": "authorize",
      "relationship": "calls"
    },
    {
      "from": "protect",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "protect",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "protect",
      "to": "halt",
      "relationship": "calls"
    },
    {
      "from": "authorize",
      "to": "==",
      "relationship": "calls"
    },
    {
      "from": "SassTest::sass_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "SassTest::sass_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "SassTest::sass_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "SassTest::sass_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "SassTest::sass_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "sass_app",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "sass",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "SassTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "sass_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "sass_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "sass_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "sass_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "sass_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "ScssTest::scss_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "ScssTest::scss_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "ScssTest::scss_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "ScssTest::scss_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "ScssTest::scss_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "scss_app",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "scss",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "ScssTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "scss_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "scss_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "scss_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "scss_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "scss_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "Mock",
      "to": "extend",
      "relationship": "calls"
    },
    {
      "from": "Mock",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "Mock",
      "to": "<",
      "relationship": "calls"
    },
    {
      "from": "Mock",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "Mock",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "Mock",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "run!",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "context",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "on_start",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "start_hook",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "expect",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "stub",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "assert_mock",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "on_stop",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "stop_hook",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "quit!",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "sessions?",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "use",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "initialized",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "describe",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "assert_match",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "string",
      "relationship": "calls"
    },
    {
      "from": "ServerTest",
      "to": "refute_match",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "foo",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "base",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "bar",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "baz",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "biz",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "foo=",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "foo?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "enable",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "sessions",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "disable",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "environment",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "new!",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "describe",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "default_content_type",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "error",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "assert_empty",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "raise",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "method_override?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "put",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "post",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "methodoverride?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "stub",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "lambda",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "run?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "raise_errors?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "show_exceptions?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "environment=",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "refute",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "dump_errors?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "instance_variable_get",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "rewind",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "sessions?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "logging?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "logging",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "static?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "public_method_defined?",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "private",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "public",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "bind",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "port",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "server",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "app_file",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "root",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "app_file=",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "views",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "root=",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "public_folder",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "public_dir=",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "public_dir",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "lock?",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTracker",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTracker",
      "to": "const_set",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTracker",
      "to": "clear",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTracker",
      "to": "used",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTracker",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTracker::use",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTracker::use",
      "to": "used",
      "relationship": "calls"
    },
    {
      "from": "MiddlewareTracker",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "const_set",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "clear",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "used",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest::use",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest::use",
      "to": "used",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "track",
      "relationship": "calls"
    },
    {
      "from": "SettingsTest",
      "to": "assert_include",
      "relationship": "calls"
    },
    {
      "from": "use",
      "to": "used",
      "relationship": "calls"
    },
    {
      "from": "SinatraTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "SinatraTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "SinatraTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "SinatraTest",
      "to": "assert_same",
      "relationship": "calls"
    },
    {
      "from": "SinatraTest",
      "to": "superclass",
      "relationship": "calls"
    },
    {
      "from": "SinatraTest",
      "to": "assert_kind_of",
      "relationship": "calls"
    },
    {
      "from": "SinatraTest",
      "to": "template_cache",
      "relationship": "calls"
    },
    {
      "from": "SinatraTest",
      "to": "new!",
      "relationship": "calls"
    },
    {
      "from": "SlimTest::slim_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "SlimTest::slim_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "SlimTest::slim_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "SlimTest::slim_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "SlimTest::slim_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "slim_app",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "slim",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "SlimTest",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "slim_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "slim_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "slim_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "slim_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "slim_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "basename",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "read",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "size",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "env_for",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "join",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "expand_path",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "head",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "downcase",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "!=",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "not_found?",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "tap",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "disable",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "basename",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "begin",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "end",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "StaticTest::assert_valid_range",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "begin",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "end",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": ">",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "-",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "assert_valid_range",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "assert_nil",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "has_key?",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "post",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "static!",
      "relationship": "calls"
    },
    {
      "from": "StaticTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "basename",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "begin",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "end",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "length",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "assert_valid_range",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "stream",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "times",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "callback",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler::schedule",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler::defer",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler::schedule!",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler::schedule!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler::schedule!",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler::defer!",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler::defer!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "MockScheduler::defer!",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest::schedule",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest::defer",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest::schedule!",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest::schedule!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest::schedule!",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest::defer!",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest::defer!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest::defer!",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "schedule!",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "!",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "defer!",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "fail",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "close",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "[]=",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "env",
      "relationship": "calls"
    },
    {
      "from": "StreamingTest",
      "to": "closed?",
      "relationship": "calls"
    },
    {
      "from": "schedule",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "defer",
      "to": "<<",
      "relationship": "calls"
    },
    {
      "from": "schedule!",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "schedule!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "schedule!",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "defer!",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "defer!",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "defer!",
      "to": "pop",
      "relationship": "calls"
    },
    {
      "from": "TestTemplate::evaluate",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "TestTemplate::evaluate",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "TestTemplate::evaluate",
      "to": "data",
      "relationship": "calls"
    },
    {
      "from": "TestTemplate",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "TestTemplate",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "TestTemplate",
      "to": "data",
      "relationship": "calls"
    },
    {
      "from": "TestTemplate",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "evaluate",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "evaluate",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "evaluate",
      "to": "data",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::render_app",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::render_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::render_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::render_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::render_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::render_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::render_app",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::with_default_layout",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::with_default_layout",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::with_default_layout",
      "to": "open",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::with_default_layout",
      "to": "write",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::with_default_layout",
      "to": "unlink",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "open",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "write",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "unlink",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "erb",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "render_app",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "render",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "assert_match",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "first",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "backtrace",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "with_default_layout",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "layout",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "settings",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "enable",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "[]",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "templates",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "test",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "empty?",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "views",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "content_type",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "call",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "headers",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "register",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "map",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::find_template",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest::find_template",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "each",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "to_sym",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "params",
      "relationship": "calls"
    },
    {
      "from": "TemplatesTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "render_app",
      "to": "is_a?",
      "relationship": "calls"
    },
    {
      "from": "render_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "render_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "render_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "render_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "render_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "render_app",
      "to": "template",
      "relationship": "calls"
    },
    {
      "from": "with_default_layout",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "with_default_layout",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "with_default_layout",
      "to": "open",
      "relationship": "calls"
    },
    {
      "from": "with_default_layout",
      "to": "write",
      "relationship": "calls"
    },
    {
      "from": "with_default_layout",
      "to": "unlink",
      "relationship": "calls"
    },
    {
      "from": "find_template",
      "to": "Array",
      "relationship": "calls"
    },
    {
      "from": "Base",
      "to": "attr_writer",
      "relationship": "calls"
    },
    {
      "from": "Builder::include?",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Builder::include?",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Builder",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "Builder",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "include?",
      "to": "any?",
      "relationship": "calls"
    },
    {
      "from": "include?",
      "to": "===",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "include",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "instance_variable_defined?",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "setup",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "Test::mock_app",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Test::app",
      "to": "new",
      "relationship": "calls"
    },
    {
      "from": "Test::body",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Test::body",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Test::body",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_body",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_body",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_body",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_body",
      "to": "lstrip",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_body",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_body",
      "to": "assert_match",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "lstrip",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "assert_match",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_status",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_status",
      "to": "Integer",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_status",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "Integer",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_like",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_like",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_like",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_include",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_include",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Test::assert_include",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "Test::options",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Test::options",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Test",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Test::patch",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Test::patch",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Test::link",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Test::link",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Test::unlink",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "Test::unlink",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "Test::method_missing",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "Test::method_missing",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "Test::method_missing",
      "to": "send",
      "relationship": "calls"
    },
    {
      "from": "body",
      "to": "to_s",
      "relationship": "calls"
    },
    {
      "from": "assert_body",
      "to": "respond_to?",
      "relationship": "calls"
    },
    {
      "from": "assert_body",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "assert_body",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "assert_body",
      "to": "lstrip",
      "relationship": "calls"
    },
    {
      "from": "assert_body",
      "to": "body",
      "relationship": "calls"
    },
    {
      "from": "assert_body",
      "to": "assert_match",
      "relationship": "calls"
    },
    {
      "from": "assert_status",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "assert_status",
      "to": "Integer",
      "relationship": "calls"
    },
    {
      "from": "assert_status",
      "to": "status",
      "relationship": "calls"
    },
    {
      "from": "assert_like",
      "to": "assert_equal",
      "relationship": "calls"
    },
    {
      "from": "assert_like",
      "to": "gsub",
      "relationship": "calls"
    },
    {
      "from": "assert_like",
      "to": "strip",
      "relationship": "calls"
    },
    {
      "from": "assert_include",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "assert_include",
      "to": "include?",
      "relationship": "calls"
    },
    {
      "from": "assert_include",
      "to": "inspect",
      "relationship": "calls"
    },
    {
      "from": "options",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "patch",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "link",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "unlink",
      "to": "request",
      "relationship": "calls"
    },
    {
      "from": "unlink",
      "to": "merge",
      "relationship": "calls"
    },
    {
      "from": "method_missing",
      "to": "response",
      "relationship": "calls"
    },
    {
      "from": "YajlTest::yajl_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "YajlTest::yajl_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "YajlTest::yajl_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "YajlTest::yajl_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "YajlTest::yajl_app",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "get",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "it",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "yajl_app",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "yajl",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "assert",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "ok?",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "assert_body",
      "relationship": "calls"
    },
    {
      "from": "YajlTest",
      "to": "assert_raises",
      "relationship": "calls"
    },
    {
      "from": "yajl_app",
      "to": "mock_app",
      "relationship": "calls"
    },
    {
      "from": "yajl_app",
      "to": "set",
      "relationship": "calls"
    },
    {
      "from": "yajl_app",
      "to": "+",
      "relationship": "calls"
    },
    {
      "from": "yajl_app",
      "to": "__dir__",
      "relationship": "calls"
    },
    {
      "from": "yajl_app",
      "to": "get",
      "relationship": "calls"
    }
  ]
}